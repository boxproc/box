{"version":3,"sources":["containers/PageTemplate/EditableTable.tsx","containers/PageTemplate/withEditTable.tsx","containers/PageTemplate/Filter/Filter.tsx","containers/PageTemplate/Filter/index.ts","containers/PageTemplate/PageTemplate.tsx","containers/PageTemplate/index.ts","containers/Ledger/Accounts/Accounts.tsx","containers/Ledger/Accounts/index.ts","containers/Ledger/Cards/components/tableColumns.tsx","containers/Ledger/Cards/Cards.tsx","containers/Ledger/Cards/index.ts","containers/Ledger/CurrencyRates/components/tableColumns.tsx","containers/Ledger/CurrencyRates/CurrencyRates.tsx","containers/Ledger/CurrencyRates/index.ts","containers/Ledger/Customers/Customers.tsx","containers/Ledger/Customers/index.ts","containers/Ledger/Statements/Statements.tsx","containers/Ledger/Statements/index.ts","containers/Ledger/Transactions/Transactions.tsx","containers/Ledger/Transactions/index.ts"],"names":["withEditTable","Component","WithEditTable","props","activeTableRowIndex","contextMenuItems","handleOpenModal","modalsStateList","handleSetActiveItemId","onRowClick","handleSetActiveTableRowIndex","viewingModalName","originProps","React","useState","isOpenedModal","setIsOpenedModal","isVisibleContextMenu","setIsVisibleContextMenu","handleRemoveActiveIds","useCallback","useEffect","isSomeModalOpened","modalsList","find","modal","name","openCurrentRowInModal","onContextMenuClick","e","value","withConfirmation","modalNamesConst","CONFIRMATION","payload","confirmationAction","action","confirmationTitle","confirmationText","menuItems","useMemo","openItem","icon","iconNamesConst","EDIT","handleClickOnRow","_","rowInfo","isLocked","original","lockedFlag","id","rowIndexOriginal","index","rowIndex","page","pageSize","onDoubleClick","onContextMenu","length","className","Fragment","disable","menuId","onClick","items","isHidden","onHide","displayName","componentUtil","getDisplayName","connect","state","activeTableRowIndexSelector","modalsStateListSelector","dispatch","bindActionCreators","openModal","setActiveItemId","setActiveTableRowIndex","withSpinner","pageTemplateProps","getTrGroupProps","activeRowIndex","FilterWrapper","styled","div","theme","colors","lighterGray","lighterGrayCell","color","darkGray","filteredFieldsToStore","data","Object","keys","filter","key","match","reduce","obj","reduxForm","form","formNamesConst","FILTER","destroyOnUnmount","enableReinitialize","FilterForm","filterAction","filterValues","handleSubmit","invalid","isAutoRefresh","isLoading","location","setIsAccessibleFiltering","stopAutoRefresh","username","userData","storageUtil","getUserData","hasInstitution","hasTransactionId","hasAccountId","hasCustomerId","hasCardId","hasProductName","hasAccountAlias","hasPanAlias","hasLastName","valuesCount","values","acc","curr","isAccessibleButton","pathname","basePath","uiItemsConst","SYSTEM_PROPERTIES","USERS","SCHEDULER","API_CALLS","USERS_ACTIVITY","ACCOUNTS","CARDS","STATEMENTS","CUSTOMERS","TRANSACTIONS","isDisabled","handleSubmitForm","a","cookiesUtil","set","JSON","stringify","expires","cookiesExpiresConst","MONTH","onSubmit","width","alignItems","flexWrap","m","text","disabled","formValues","getFormValues","isAutoRefreshSelector","Filter","withModal","withRouter","title","columns","newModalName","resetUtils","AdditionalButton","initialFilterValues","setIsOpenFilter","filterData","isOpenFilter","isDownloadButton","isSearchable","uiItems","isReadOnly","setActivePagePermission","isFilterable","setIsFilterable","timer","setInterval","clearInterval","currentUiItem","item","permission","filterButtonText","fileName","split","join","toLowerCase","isData","filterInitialValues","storedFilter","get","parse","isSearchableButton","handleSetIsFilterable","handleSetIsOpenFilter","PageTitle","pageId","mb","iconName","initialValues","fontSize","mr","PLUS","SEARCH","selectable","dropdownListPosition","ToggleButtonComponent","DOWNLOAD","FILE","downloadUtil","downloadCSV","classNames","seconds","ml","size","STOP","mt","EditableTable","filterable","isOpenFilterSelector","isReadOnlySelector","uiItemsSelector","PageTemplate","accounts","filterAccounts","institutionsOptions","hasProductOverride","addProductOverride","resetAccounts","productOverrideId","currentId","filterCustomersById","filterCardsById","filterTransactionsById","filterStatementsById","currentCurrencyCode","isReadOnlyTransactions","manualTransaction","MANUAL_TRANSACTION","isReadOnlyManualTransaction","permissionTypesConst","READ_ONLY","handleEditOverride","EDIT_PRODUCT","withOpenProductModal","isDivider","account_id","accountId","currencyCode","institutionId","tableColumns","ADD_ACCOUNT","EDIT_ACCOUNT","isAccountLoadingSelector","accountsSelector","userInstitutionsOptionsSelector","currentAccHasProductOverrideSelector","currentAccProductOverrideIdSelector","activeItemIdSelector","currentAccCurrencyCodeSelector","handleFilterAccounts","handleFilterByIdCustomers","handleFilterByIdCards","handleFilterByIdTransactions","handleFilterByIdStatements","handleAddProductOverride","Accounts","maxWidth","Header","accessor","Cell","isNumber","isDate","Cards","cards","filterCards","filterAccountsById","resetCards","card_id","INFO_CARDS","isLoadingCardsSelector","cardsSelector","handleFilterCards","handleFilterByIdAccounts","onCenter","CurrencyRates","currencyRatesData","filterCurrencyRates","resetCurrencyRates","providerDatetimeFrom","setProviderDatetimeFrom","providerDatetimeTo","setProviderDatetimeTo","createdDatetimeFrom","setCreatedDatetimeFrom","createdDatetimeTo","setCreatedDatetimeTo","dateUtil","yesterdayDateTime","todayDateTime","rateProvider","currencyRatesProvidersOptions","el","ADD_CURRENCY_RATE","EDIT_CURRENCY_RATE","isLoadingCurrencyRatesSelector","currencyRatesSelector","handleFilterCurrencyRates","Customers","customers","filterCustomers","resetCustomers","customer_id","ADD_CUSTOMER","EDIT_CUSTOMER","isLoadingCustomersSelector","customersSelector","handleFilterCustomers","Statements","filterStatements","downloadStatement","isLoadingStatement","resetStatements","statements","dateFrom","setDateFrom","dateTo","setDateTo","yesterdayDate","todayDate","handleClickOnPdfReportButton","statementId","setTimeout","FILE_PDF","statement_id","statementsTableColumns","cellInfo","justifyContent","statementsDateFrom","statementsDateTo","isStatementsLoadingSelector","isTransArsLoadingSelector","statementsSelector","handleFilterStatements","handleDownloadStatement","filterTransactions","isConvertibleToLoan","isSettledTr","resetTransactions","transactions","dateTimeFrom","setDateTimeFrom","dateTimeTo","setDateTimeTo","isReadOnlySettleTr","uiItem","SETTLE_TRANSACTION","baseItems","transaction_id","convertItems","LOAN","TRANSACTION","activeTab","settleTrItems","transactionId","transactionsDateTimeFrom","transactionsDateTimeTo","isLoadingTransactionsSelector","transactionsSelector","isTrConvertibleToLoanSelector","isSettledTrSelector","handleFilterTransactions","Transactions"],"mappings":"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","file":"static/js/1.f36f2bac.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Table, withSpinner } from 'components';\n\nimport { IWithEditTable, withEditTable } from './withEditTable';\n\ninterface IPageTemplate extends IWithEditTable {\n  data: Array<object>;\n  columns: Array<object>;\n  isLoading: boolean;\n}\n\nexport const PageTemplate: React.FC<IPageTemplate> = props => {\n  const { onRowClick, activeTableRowIndex, ...pageTemplateProps } = props;\n\n  return (\n    <Table\n      getTrGroupProps={onRowClick}\n      activeRowIndex={activeTableRowIndex}\n      {...pageTemplateProps}\n    />\n  );\n};\n\nexport default withEditTable(\n  withSpinner()(PageTemplate)\n);\n","import React from 'react';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { connect } from 'react-redux';\nimport { ComponentPropsGetter0, ComponentPropsGetterR, RowInfo } from 'react-table';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { ContextMenuList } from 'components';\n\nimport { iconNamesConst, modalNamesConst } from 'consts';\n\nimport { modalsList } from 'containers/Modals/modalsList';\n\nimport {\n  activeTableRowIndexSelector,\n  IStoreState,\n  modalsStateListSelector,\n  openModal,\n  setActiveItemId,\n  setActiveTableRowIndex,\n  TOpenModal,\n  TSetActiveItemId,\n  TSetActiveTableRowIndex,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\n\nimport { componentUtil } from 'utils';\n\nexport interface IWithEditTable {\n  activeTableRowIndex?: number;\n  contextMenuItems?: Array<IContextMenuItem>;\n  handleOpenModal: TOpenModal;\n  modalsStateList: object;\n  onRowClick: ComponentPropsGetterR | ComponentPropsGetter0;\n  handleSetActiveItemId: TSetActiveItemId;\n  handleSetActiveTableRowIndex: TSetActiveTableRowIndex;\n  viewingModalName: string;\n}\n\nexport const withEditTable = <OriginProps extends {}>(\n  Component: React.ComponentType<OriginProps & Partial<IWithEditTable>>\n) => {\n  const WithEditTable: React.FC<IWithEditTable> = props => {\n    const {\n      activeTableRowIndex,\n      contextMenuItems = [],\n      handleOpenModal,\n      modalsStateList,\n      onRowClick,\n      handleSetActiveItemId,\n      handleSetActiveTableRowIndex,\n      viewingModalName,\n      ...originProps\n    } = props;\n\n    const [isOpenedModal, setIsOpenedModal] = React.useState(null);\n    const [isVisibleContextMenu, setIsVisibleContextMenu] = React.useState(false);\n\n    const handleRemoveActiveIds = React.useCallback(\n      () => {\n        setIsVisibleContextMenu(false);\n\n        handleSetActiveTableRowIndex(null);\n        handleSetActiveItemId(null);\n      },\n      [handleSetActiveTableRowIndex, handleSetActiveItemId]\n    );\n\n    React.useEffect(\n      () => {\n        const isSomeModalOpened = modalsList.find(modal => modalsStateList[`is${modal.name}`]);\n\n        setIsOpenedModal(isSomeModalOpened);\n      },\n      [modalsStateList]\n    );\n\n    React.useEffect(\n      () => {\n        if (!isOpenedModal) {\n          handleRemoveActiveIds();\n        }\n      },\n      [isOpenedModal, handleRemoveActiveIds]\n    );\n\n    const openCurrentRowInModal = React.useCallback(\n      () => handleOpenModal({ name: viewingModalName }),\n      [handleOpenModal, viewingModalName]\n    );\n\n    const onContextMenuClick = React.useCallback(\n      (e: Event, value: IContextMenuItem) => {\n        value.withConfirmation\n          ? handleOpenModal({\n            name: modalNamesConst.CONFIRMATION,\n            payload: {\n              confirmationAction: value.action,\n              confirmationTitle: value.confirmationTitle,\n              confirmationText: value.confirmationText,\n            },\n          })\n          : value.action();\n      },\n      [handleOpenModal]\n    );\n\n    const menuItems = React.useMemo(\n      () => {\n        const openItem = {\n          name: 'Open',\n          icon: iconNamesConst.EDIT,\n          action: () => openCurrentRowInModal(),\n        };\n\n        return viewingModalName ? [openItem, ...contextMenuItems] : contextMenuItems;\n      },\n      [contextMenuItems, viewingModalName, openCurrentRowInModal]\n    );\n\n    const handleClickOnRow = React.useCallback(\n      (_, rowInfo: RowInfo) => {\n        const isLocked = rowInfo.original.lockedFlag;\n        const id = rowInfo.original.id;\n        const rowIndexOriginal = rowInfo.index + 1; // from 1 for css style\n        const rowIndex = rowInfo.page\n          ? rowIndexOriginal - rowInfo.pageSize * rowInfo.page\n          : rowIndexOriginal; // considering page number\n\n        return {\n          onDoubleClick: () => {\n            if (viewingModalName) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              openCurrentRowInModal();\n            }\n          },\n          onContextMenu: () => {\n            if (menuItems.length) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              setIsVisibleContextMenu(true);\n            }\n          },\n          className: isLocked && 'is-gray',\n        };\n      },\n      [\n        openCurrentRowInModal,\n        viewingModalName,\n        menuItems,\n        handleSetActiveItemId,\n        handleSetActiveTableRowIndex,\n      ]\n    );\n\n    return (\n      <React.Fragment>\n        <ContextMenuTrigger\n          id=\"tableContextMenu\"\n          disable={!menuItems.length}\n        >\n          <Component\n            onRowClick={handleClickOnRow}\n            activeTableRowIndex={activeTableRowIndex}\n            {...originProps as OriginProps}\n          />\n        </ContextMenuTrigger>\n        <ContextMenuList\n          menuId=\"tableContextMenu\"\n          onClick={onContextMenuClick}\n          items={menuItems}\n          isHidden={isOpenedModal || !isVisibleContextMenu}\n          onHide={(!isOpenedModal && activeTableRowIndex) ? handleRemoveActiveIds : null}\n        />\n      </React.Fragment>\n    );\n  };\n\n  WithEditTable.displayName = `WithEditTable(${componentUtil.getDisplayName(Component)})`;\n\n  const mapStateToProps = (state: IStoreState) => ({\n    activeTableRowIndex: activeTableRowIndexSelector(state),\n    modalsStateList: modalsStateListSelector(state),\n  });\n\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n    {\n      handleOpenModal: openModal,\n      handleSetActiveItemId: setActiveItemId,\n      handleSetActiveTableRowIndex: setActiveTableRowIndex,\n    },\n    dispatch\n  );\n\n  return connect<Partial<IWithEditTable>, Partial<IWithEditTable>, any, IStoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n  )(WithEditTable);\n};\n","import React, { ReactChild } from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport { Flex } from '@rebass/grid';\nimport * as H from 'history';\n\nimport styled from 'theme';\n\nimport { Button } from 'components';\n\nimport { basePath, cookiesExpiresConst, formNamesConst, uiItemsConst } from 'consts';\n\nimport { TSetIsAccessibleFiltering, TStopAutoRefresh } from 'store';\n\nimport { cookiesUtil, storageUtil } from 'utils';\n\ninterface IFilterWrapper {\n  isHidden: boolean;\n}\n\nconst FilterWrapper = styled.div<IFilterWrapper>`\n  margin-bottom: 15px;\n  padding: 10px 15px 12px;\n  border: 1px solid ${({ theme }) => theme.colors.lighterGray};\n  border-radius: 2px;\n  background-color: ${({ theme }) => theme.colors.lighterGrayCell};\n\n  .title {\n    font-size: 18px;\n    color: ${({ theme, color }) => color || theme.colors.darkGray};\n    font-weight: bold;\n  }\n\n  ${({ isHidden }) => isHidden && `\n    display: none;\n  `};\n`;\n\ninterface IFilter {\n  filterAction: () => void;\n  filterValues: object;\n  isAutoRefresh: boolean;\n  isHidden: boolean;\n  isLoading: boolean;\n  location: H.Location;\n  setIsAccessibleFiltering: TSetIsAccessibleFiltering;\n  stopAutoRefresh: TStopAutoRefresh;\n  FilterForm: ReactChild;\n}\n\nexport const filteredFieldsToStore = (data: object) => {\n  return data && Object.keys(data)\n    .filter(key => !key.match(/dateFrom|dateTo|dateTimeFrom|dateTimeTo/gi))\n    .reduce(\n      (obj, key) => {\n        obj[key] = data[key];\n        return obj;\n      },\n      {}\n    );\n};\n\ntype TFilter = IFilter & InjectedFormProps<{}, IFilter>;\n\nconst Filter: React.FC<TFilter> = ({\n  FilterForm,\n  filterAction,\n  filterValues,\n  handleSubmit,\n  invalid,\n  isAutoRefresh,\n  isHidden,\n  isLoading,\n  location,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n}) => {\n  const username = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      return userData && userData.username;\n    },\n    []\n  );\n\n  const hasInstitution = React.useMemo(\n    () => filterValues && filterValues['institutionId'],\n    [filterValues]\n  );\n\n  const hasTransactionId = React.useMemo(\n    () => filterValues && filterValues['transactionId'],\n    [filterValues]\n  );\n\n  const hasAccountId = React.useMemo(\n    () => filterValues && filterValues['accountId'],\n    [filterValues]\n  );\n\n  const hasCustomerId = React.useMemo(\n    () => filterValues && filterValues['customerId'],\n    [filterValues]\n  );\n\n  const hasCardId = React.useMemo(\n    () => filterValues && filterValues['cardId'],\n    [filterValues]\n  );\n\n  const hasProductName = React.useMemo(\n    () => filterValues && filterValues['productName'],\n    [filterValues]\n  );\n\n  const hasAccountAlias = React.useMemo(\n    () => filterValues && filterValues['accountAlias'],\n    [filterValues]\n  );\n\n  const hasPanAlias = React.useMemo(\n    () => filterValues && filterValues['panAlias'],\n    [filterValues]\n  );\n\n  const hasLastName = React.useMemo(\n    () => filterValues && filterValues['lastName'],\n    [filterValues]\n  );\n\n  const valuesCount = React.useMemo(\n    () => filterValues\n      && Object.values(filterValues).reduce((acc, curr) => curr ? ++acc : acc, 0),\n    [filterValues]\n  );\n\n  const isAccessibleButton = React.useCallback(\n    () => {\n      switch (location.pathname) {\n        case `${basePath}${uiItemsConst.SYSTEM_PROPERTIES}`:\n        case `${basePath}${uiItemsConst.USERS}`:\n        case `${basePath}${uiItemsConst.SCHEDULER}`:\n          return valuesCount >= 0;\n\n        case `${basePath}${uiItemsConst.API_CALLS}`:\n        case `${basePath}${uiItemsConst.USERS_ACTIVITY}`:\n          return valuesCount > 1;\n\n        case `${basePath}${uiItemsConst.ACCOUNTS}`:\n          return hasInstitution && (hasAccountId || hasAccountAlias || hasLastName);\n\n        case `${basePath}${uiItemsConst.CARDS}`:\n          return hasInstitution && (hasAccountId || hasCardId || hasCustomerId || hasPanAlias);\n\n        case `${basePath}${uiItemsConst.STATEMENTS}`:\n          return hasInstitution && (hasAccountId || hasAccountAlias || hasLastName);\n\n        case `${basePath}${uiItemsConst.CUSTOMERS}`:\n          return hasInstitution && (hasCustomerId || hasLastName);\n\n        case `${basePath}${uiItemsConst.TRANSACTIONS}`:\n          return hasInstitution && (\n            hasTransactionId\n            || hasProductName\n            || hasCustomerId\n            || hasAccountId\n          );\n\n        default:\n          return valuesCount > 0;\n      }\n    },\n    [\n      hasInstitution,\n      hasAccountId,\n      hasCustomerId,\n      hasCardId,\n      hasTransactionId,\n      hasAccountAlias,\n      hasPanAlias,\n      hasLastName,\n      hasProductName,\n      valuesCount,\n      location,\n    ]\n  );\n\n  const isDisabled = React.useMemo(\n    () => invalid || !isAccessibleButton(),\n    [isAccessibleButton, invalid]\n  );\n\n  React.useEffect(\n    () => {\n      setIsAccessibleFiltering(!isDisabled);\n    },\n    [isDisabled, setIsAccessibleFiltering]\n  );\n\n  // eslint-disable-next-line\n  const handleSubmitForm = React.useCallback(\n    handleSubmit(async data => {\n      await filterAction();\n\n      if (isAutoRefresh) {\n        stopAutoRefresh();\n      }\n\n      cookiesUtil.set(\n        `${location.pathname}-${username}`,\n        JSON.stringify(filteredFieldsToStore(data)),\n        { expires: cookiesExpiresConst.MONTH }\n      );\n    }),\n    [handleSubmit, filterAction, isAutoRefresh, stopAutoRefresh]\n  );\n\n  return (\n    <FilterWrapper isHidden={isHidden}>\n      <div className=\"title\">Filter</div>\n      <form onSubmit={handleSubmitForm}>\n        <Flex\n          width=\"960px\"\n          alignItems=\"flex-end\"\n          flexWrap=\"wrap\"\n          m=\"0 -8px 5px\"\n        >\n          {FilterForm}\n        </Flex>\n        <Button\n          text=\"Show\"\n          isLoading={isLoading}\n          disabled={isDisabled}\n        />\n      </form>\n    </FilterWrapper >\n  );\n};\n\nexport default reduxForm<{}, IFilter>({\n  form: formNamesConst.FILTER,\n  // keepDirtyOnReinitialize: true,\n  destroyOnUnmount: false,\n  enableReinitialize: true,\n})(Filter);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { getFormValues } from 'redux-form';\n\nimport { formNamesConst } from 'consts';\n\nimport Filter from './Filter';\n\nimport {\n  isAutoRefreshSelector,\n  IStoreState,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n} from 'store';\n\nconst formValues = getFormValues(formNamesConst.FILTER);\n\nconst mapStateToProps = (state: IStoreState) => ({\n  filterValues: formValues(state),\n  isAutoRefresh: isAutoRefreshSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    setIsAccessibleFiltering,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Filter);\n","import React, { ReactChild } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\n\nimport { Box, Flex } from '@rebass/grid';\n\nimport { Button, CountDownTimer, Dropdown, DropdownOption } from 'components';\nimport { IWithModal, withModal } from 'HOCs';\n\nimport { basePath, iconNamesConst } from 'consts';\n\nimport EditableTable from './EditableTable';\nimport Filter from './Filter';\nimport PageTitle from './PageTitle';\n\nimport {\n  IUiItem,\n  TResetUtils,\n  TSetActivePagePermission,\n  TSetIsOpenFilter,\n  TStopAutoRefresh,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\nimport { cookiesUtil, downloadUtil, storageUtil } from 'utils';\n\ninterface PageTemplateProps extends RouteComponentProps, IWithModal {\n  AdditionalButton?: ReactChild;\n  columns: Array<object>;\n  contextMenuItems?: Array<IContextMenuItem>;\n  data: Array<object>;\n  filterAction?: () => void;\n  filterData: object;\n  FilterForm?: ReactChild;\n  initialFilterValues?: object;\n  isAutoRefresh?: boolean;\n  isDownloadButton?: boolean;\n  isLoading: boolean;\n  isOpenFilter: boolean;\n  isReadOnly: boolean;\n  isSearchable?: boolean;\n  newModalName?: string;\n  resetUtils: TResetUtils;\n  setActivePagePermission: TSetActivePagePermission;\n  setIsOpenFilter: TSetIsOpenFilter;\n  stopAutoRefresh: TStopAutoRefresh;\n  title: string;\n  uiItems: Array<IUiItem>;\n}\n\nexport const PageTemplate: React.FC<PageTemplateProps> = props => {\n  const {\n    title,\n    data,\n    columns,\n    FilterForm,\n    filterAction,\n    openModal,\n    newModalName,\n    location,\n    isAutoRefresh,\n    stopAutoRefresh,\n    resetUtils,\n    AdditionalButton,\n    initialFilterValues,\n    filterData,\n    setIsOpenFilter,\n    isOpenFilter,\n    isDownloadButton,\n    isSearchable,\n    uiItems,\n    isReadOnly,\n    isLoading,\n    setActivePagePermission,\n    ...pageTemplateProps\n  } = props;\n\n  const [isFilterable, setIsFilterable] = React.useState(false);\n\n  React.useEffect(\n    () => {\n      const timer = isAutoRefresh && setInterval(() => filterAction(), 5000);\n\n      return () => clearInterval(timer);\n    },\n    [isAutoRefresh, filterAction]\n  );\n\n  const currentUiItem = React.useMemo(\n    () => uiItems.find(item => `${basePath}${item.id}` === `${location.pathname}`),\n    [location, uiItems]\n  );\n\n  React.useEffect(\n    () => {\n      const permission = currentUiItem && currentUiItem.permission;\n\n      setActivePagePermission(permission);\n    },\n    [setActivePagePermission, uiItems, location, currentUiItem]\n  );\n\n  React.useEffect(\n    () => {\n      return () => resetUtils();\n    },\n    [resetUtils]\n  );\n\n  const filterButtonText = React.useMemo(\n    () => isOpenFilter ? 'Hide Filter' : 'Show Filter',\n    [isOpenFilter]\n  );\n\n  const fileName = React.useMemo(\n    () => title.split(' ').join('_').toLowerCase(),\n    [title]\n  );\n\n  const isData = React.useMemo(\n    () => data && data.length,\n    [data]\n  );\n\n  const filterInitialValues = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      const username = userData && userData.username;\n\n      const storedFilter = cookiesUtil.get(`${location.pathname}-${username}`);\n\n      return {\n        ...initialFilterValues,\n        ...(storedFilter ? JSON.parse(storedFilter) : {}),\n      };\n    },\n    [initialFilterValues, location]\n  );\n\n  const isSearchableButton = React.useMemo(\n    () => isSearchable && data && data.length > 10,\n    [isSearchable, data]\n  );\n\n  const handleSetIsFilterable = React.useCallback(\n    () => setIsFilterable(!isFilterable),\n    [isFilterable]\n  );\n\n  const handleSetIsOpenFilter = React.useCallback(\n    () => setIsOpenFilter(!isOpenFilter),\n    [setIsOpenFilter, isOpenFilter]\n  );\n\n  const handleOpenModal = React.useCallback(\n    () => openModal({ name: newModalName }),\n    [openModal, newModalName]\n  );\n\n  return (\n    <React.Fragment>\n      <PageTitle\n        title={title}\n        pageId={currentUiItem && currentUiItem.id}\n      />\n      {FilterForm && (\n        <Box mb=\"5px\">\n          <Button\n            text={filterButtonText}\n            iconName={iconNamesConst.FILTER}\n            onClick={handleSetIsOpenFilter}\n          />\n        </Box>\n      )}\n      {FilterForm && (\n        <Filter\n          filterAction={filterAction}\n          initialValues={filterInitialValues}\n          isHidden={!isOpenFilter}\n          isLoading={isLoading}\n          location={location}\n          FilterForm={FilterForm}\n        />\n      )}\n      <Flex alignItems=\"center\" fontSize=\"0px\">\n        {newModalName && !isReadOnly && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Add New\"\n              iconName={iconNamesConst.PLUS}\n              onClick={handleOpenModal}\n              disabled={isLoading}\n            />\n          </Box>\n        )}\n        {isSearchableButton && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Search\"\n              disabled={!isData || isLoading}\n              iconName={iconNamesConst.SEARCH}\n              onClick={handleSetIsFilterable}\n            />\n          </Box>\n        )}\n        {AdditionalButton && (\n          <Box mr=\"20px\">\n            {AdditionalButton}\n          </Box>\n        )}\n        {isDownloadButton && (\n          <Box mr=\"20px\">\n            <Dropdown\n              selectable={false}\n              isDisabled={!isData}\n              dropdownListPosition=\"center\"\n              ToggleButtonComponent={(\n                <Button\n                  text=\"Download\"\n                  iconName={iconNamesConst.DOWNLOAD}\n                  disabled={isLoading}\n                />\n              )}\n            >\n              <DropdownOption>\n                <Button\n                  text=\".csv\"\n                  iconName={iconNamesConst.FILE}\n                  onClick={() => downloadUtil.downloadCSV(fileName, data)}\n                  classNames={['no-text-transform']}\n                  disabled={isLoading}\n                />\n              </DropdownOption>\n            </Dropdown>\n          </Box>\n        )}\n        {isAutoRefresh && (\n          <Flex alignItems=\"flex-end\">\n            <CountDownTimer seconds={5} />\n            <Box ml=\"4px\">\n              <Button\n                text=\"Stop Auto Refreshing\"\n                size=\"11\"\n                iconName={iconNamesConst.STOP}\n                onClick={stopAutoRefresh}\n                disabled={isLoading}\n              />\n            </Box>\n          </Flex>\n        )}\n      </Flex>\n      <Box mt=\"5px\">\n        <EditableTable\n          data={data}\n          columns={columns}\n          filterable={isFilterable}\n          isLoading={isLoading}\n          {...pageTemplateProps}\n        />\n      </Box>\n    </React.Fragment >\n  );\n};\n\nexport default withModal(\n  withRouter(PageTemplate)\n);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport PageTemplate from './PageTemplate';\n\nimport {\n  isAutoRefreshSelector,\n  isOpenFilterSelector,\n  isReadOnlySelector,\n  IStoreState,\n  resetUtils,\n  setActivePagePermission,\n  setIsOpenFilter,\n  stopAutoRefresh,\n  uiItemsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isAutoRefresh: isAutoRefreshSelector(state),\n  isOpenFilter: isOpenFilterSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n  uiItems: uiItemsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    resetUtils,\n    setIsOpenFilter,\n    setActivePagePermission,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PageTemplate);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { IWithModal, withModal } from 'HOCs';\n\nimport { iconNamesConst, modalNamesConst, permissionTypesConst, uiItemsConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { AccountsFilter } from './forms';\n\nimport {\n  IAccount,\n  IUiItem,\n  THandleAddProductOverride,\n  THandleFilterAccounts,\n  THandleFilterCardsById,\n  THandleFilterCustomersById,\n  THandleFilterStatementsById,\n  THandleFilterTransactionsById,\n  TResetAccounts,\n  TSetActiveItemId,\n} from 'store';\nimport { ISelectValue } from 'types';\n\ninterface IAccounts extends IWithModal {\n  accounts: ImmutableArray<IAccount>;\n  addProductOverride: THandleAddProductOverride;\n  currentCurrencyCode: number;\n  currentId: number;\n  filterAccounts: THandleFilterAccounts;\n  filterCardsById: THandleFilterCardsById;\n  filterCustomersById: THandleFilterCustomersById;\n  filterStatementsById: THandleFilterStatementsById;\n  filterTransactionsById: THandleFilterTransactionsById;\n  hasProductOverride: boolean;\n  institutionsOptions: Array<ISelectValue>;\n  isLoading: boolean;\n  isReadOnly: boolean;\n  productOverrideId: number;\n  resetAccounts: TResetAccounts;\n  setActiveItemId: TSetActiveItemId;\n  uiItems: Array<IUiItem>;\n}\n\nconst Accounts: React.FC<IAccounts> = ({\n  accounts,\n  filterAccounts,\n  institutionsOptions,\n  hasProductOverride,\n  addProductOverride,\n  openModal,\n  resetAccounts,\n  setActiveItemId,\n  productOverrideId,\n  currentId,\n  filterCustomersById,\n  filterCardsById,\n  filterTransactionsById,\n  filterStatementsById,\n  currentCurrencyCode,\n  isLoading,\n  isReadOnly,\n  uiItems,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetAccounts();\n    },\n    [resetAccounts]\n  );\n\n  const isReadOnlyTransactions = React.useMemo(\n    () => {\n      const manualTransaction = uiItems.find(item => item.id === uiItemsConst.MANUAL_TRANSACTION);\n\n      const isReadOnlyItem = (item: IUiItem) => {\n        if (!item) {\n          return false;\n        }\n\n        return item.permission === permissionTypesConst.READ_ONLY;\n      };\n\n      return {\n        isReadOnlyManualTransaction: isReadOnlyItem(manualTransaction),\n      };\n    },\n    [uiItems]\n  );\n\n  const handleEditOverride = React.useCallback(\n    () => {\n      if (hasProductOverride) {\n        setActiveItemId(productOverrideId);\n        if (currentId) {\n          openModal({ name: modalNamesConst.EDIT_PRODUCT });\n        }\n      } else {\n        addProductOverride(currentId, { withOpenProductModal: true });\n      }\n    },\n    [\n      openModal,\n      addProductOverride,\n      hasProductOverride,\n      productOverrideId,\n      setActiveItemId,\n      currentId,\n    ]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: hasProductOverride ? 'Product override' : 'Add product override',\n        icon: hasProductOverride ? iconNamesConst.EDIT : iconNamesConst.PLUS,\n        isDisabled: isReadOnly,\n        action: handleEditOverride,\n      },\n      { isDivider: true },\n      {\n        name: 'Customers',\n        action: () => filterCustomersById({ account_id: currentId }),\n      },\n      {\n        name: 'Cards',\n        action: () => filterCardsById({ account_id: currentId }),\n      },\n      {\n        name: 'Statements',\n        action: () => filterStatementsById({ account_id: currentId }),\n      },\n      {\n        name: 'Transactions',\n        action: () => filterTransactionsById({ account_id: currentId }),\n      },\n      { isDivider: true },\n      {\n        name: 'Manual Transaction',\n        isDisabled: isReadOnlyTransactions.isReadOnlyManualTransaction,\n        action: () => openModal({\n          name: modalNamesConst.MANUAL_TRANSACTION,\n          payload: {\n            accountId: currentId,\n            currencyCode: currentCurrencyCode,\n          },\n        }),\n      },\n    ],\n    [\n      hasProductOverride,\n      handleEditOverride,\n      filterCustomersById,\n      filterTransactionsById,\n      filterStatementsById,\n      filterCardsById,\n      currentId,\n      currentCurrencyCode,\n      openModal,\n      isReadOnly,\n      isReadOnlyTransactions,\n    ]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n      };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Accounts\"\n      data={accounts}\n      columns={tableColumns}\n      newModalName={modalNamesConst.ADD_ACCOUNT}\n      viewingModalName={modalNamesConst.EDIT_ACCOUNT}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterAccounts}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <AccountsFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default withModal(Accounts);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Accounts from './Accounts';\n\nimport {\n  accountsSelector,\n  activeItemIdSelector,\n  currentAccCurrencyCodeSelector,\n  currentAccHasProductOverrideSelector,\n  currentAccProductOverrideIdSelector,\n  handleAddProductOverride,\n  handleFilterAccounts,\n  handleFilterByIdCards,\n  handleFilterByIdCustomers,\n  handleFilterByIdStatements,\n  handleFilterByIdTransactions,\n  isAccountLoadingSelector,\n  isReadOnlySelector,\n  IStoreState,\n  resetAccounts,\n  setActiveItemId,\n  uiItemsSelector,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isAccountLoadingSelector(state),\n  accounts: accountsSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  hasProductOverride: currentAccHasProductOverrideSelector(state),\n  productOverrideId: currentAccProductOverrideIdSelector(state),\n  currentId: activeItemIdSelector(state),\n  currentCurrencyCode: currentAccCurrencyCodeSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n  uiItems: uiItemsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterAccounts: handleFilterAccounts,\n    filterCustomersById: handleFilterByIdCustomers,\n    filterCardsById: handleFilterByIdCards,\n    filterTransactionsById: handleFilterByIdTransactions,\n    filterStatementsById: handleFilterByIdStatements,\n    addProductOverride: handleAddProductOverride,\n    setActiveItemId,\n    resetAccounts,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Accounts);\n","import { TableCell, TableHeader } from 'components';\nimport { ICard } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof ICard> = ITableCell<ICard[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 120,\n    Header: <TableHeader title=\"ID\" />,\n    accessor: 'id',\n    Cell: (props: TCell<'id'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 120,\n    Header: <TableHeader title=\"Account ID\" />,\n    accessor: 'accountId',\n    Cell: (props: TCell<'accountId'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 120,\n    Header: <TableHeader title=\"Customer ID\" />,\n    accessor: 'customerId',\n    Cell: (props: TCell<'customerId'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"PAN Alias\" />,\n    accessor: 'panAlias',\n    Cell: (props: TCell<'panAlias'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"PAN Masked\" />,\n    accessor: 'panMasked',\n    Cell: (props: TCell<'panMasked'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 120,\n    Header: <TableHeader title=\"Expiry Date\" />,\n    accessor: 'expiryDate',\n    Cell: (props: TCell<'expiryDate'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Status\" />,\n    accessor: 'status',\n    Cell: (props: TCell<'status'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { modalNamesConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { CardsFilter } from './forms';\n\nimport {\n  ICard,\n  THandleFilterAccountsById,\n  THandleFilterCards,\n  THandleFilterCustomersById,\n  THandleFilterStatementsById,\n  THandleFilterTransactionsById,\n  TResetCards,\n} from 'store';\n\nimport { ISelectValue } from 'types';\n\ninterface ICards {\n  currentId: number;\n  cards: ImmutableArray<ICard>;\n  filterCards: THandleFilterCards;\n  institutionsOptions: Array<ISelectValue>;\n  filterCustomersById: THandleFilterCustomersById;\n  filterAccountsById: THandleFilterAccountsById;\n  filterTransactionsById: THandleFilterTransactionsById;\n  filterStatementsById: THandleFilterStatementsById;\n  resetCards: TResetCards;\n  isLoading: boolean;\n}\n\nconst Cards: React.FC<ICards> = ({\n  cards,\n  filterCards,\n  filterCustomersById,\n  filterAccountsById,\n  filterTransactionsById,\n  filterStatementsById,\n  institutionsOptions,\n  currentId,\n  resetCards,\n  isLoading,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetCards();\n    },\n    [resetCards]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      { isDivider: true },\n      {\n        name: 'Accounts',\n        action: () => filterAccountsById({ card_id: currentId }),\n      },\n      {\n        name: 'Customers',\n        action: () => filterCustomersById({ card_id: currentId }),\n      },\n      {\n        name: 'Statements',\n        action: () => filterStatementsById({ card_id: currentId }),\n      },\n      {\n        name: 'Transactions',\n        action: () => filterTransactionsById({ card_id: currentId }),\n      },\n    ],\n    [\n      filterCustomersById,\n      filterTransactionsById,\n      filterStatementsById,\n      filterAccountsById,\n      currentId,\n    ]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n      };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Cards\"\n      data={cards}\n      columns={tableColumns}\n      viewingModalName={modalNamesConst.INFO_CARDS}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterCards}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <CardsFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default Cards;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Cards from './Cards';\n\nimport {\n  activeItemIdSelector,\n  cardsSelector,\n  handleFilterByIdAccounts,\n  handleFilterByIdCustomers,\n  handleFilterByIdStatements,\n  handleFilterByIdTransactions,\n  handleFilterCards,\n  isLoadingCardsSelector,\n  IStoreState,\n  resetCards,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isLoadingCardsSelector(state),\n  cards: cardsSelector(state),\n  currentId: activeItemIdSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterCards: handleFilterCards,\n    filterAccountsById: handleFilterByIdAccounts,\n    filterCustomersById: handleFilterByIdCustomers,\n    filterStatementsById: handleFilterByIdStatements,\n    filterTransactionsById: handleFilterByIdTransactions,\n    resetCards,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Cards);\n","import { TableCell, TableHeader } from 'components';\nimport { ICurrencyRate } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof ICurrencyRate> = ITableCell<ICurrencyRate[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Institution ID\" />,\n    accessor: 'institutionId',\n    Cell: (props: TCell<'institutionId'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institutionName',\n    Cell: (props: TCell<'institutionName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Provider\" />,\n    accessor: 'rateProvider',\n    Cell: (props: TCell<'rateProvider'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"From Currency\" />,\n    accessor: 'fromCurrency',\n    Cell: (props: TCell<'fromCurrency'>) => (\n      <TableCell\n        value={props.value}\n        onCenter={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"To Currency\" />,\n    accessor: 'toCurrency',\n    Cell: (props: TCell<'toCurrency'>) => (\n      <TableCell\n        value={props.value}\n        onCenter={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Spot Rate\" />,\n    accessor: 'spotRate',\n    Cell: (props: TCell<'spotRate'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 160,\n    Header: <TableHeader title=\"Created Datetime\" />,\n    accessor: 'createdDatetime',\n    Cell: (props: TCell<'createdDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 160,\n    Header: <TableHeader title=\"Provider Datetime\" />,\n    accessor: 'providerDatetime',\n    Cell: (props: TCell<'providerDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport PageTemplate from 'containers/PageTemplate';\n\nimport { currencyRatesProvidersOptions, modalNamesConst } from 'consts';\n\nimport { ICurrencyRate, THandleFilterCurrencyRates, TResetCurrencyRates } from 'store';\nimport { tableColumns } from './components';\nimport { CurrencyRatesFilter } from './forms';\n\nimport { ISelectValue } from 'types';\nimport { dateUtil } from 'utils';\n\ninterface ICurrencyRates {\n  currencyRatesData: ImmutableArray<Partial<ICurrencyRate>>;\n  filterCurrencyRates: THandleFilterCurrencyRates;\n  institutionsOptions: Array<ISelectValue>;\n  isLoading: boolean;\n  resetCurrencyRates: TResetCurrencyRates;\n}\n\nconst CurrencyRates: React.FC<ICurrencyRates> = ({\n  currencyRatesData,\n  filterCurrencyRates,\n  institutionsOptions,\n  isLoading,\n  resetCurrencyRates,\n}) => {\n  const [providerDatetimeFrom, setProviderDatetimeFrom] = React.useState(null);\n  const [providerDatetimeTo, setProviderDatetimeTo] = React.useState(null);\n  const [createdDatetimeFrom, setCreatedDatetimeFrom] = React.useState(null);\n  const [createdDatetimeTo, setCreatedDatetimeTo] = React.useState(null);\n\n  React.useEffect(\n    () => {\n      setProviderDatetimeFrom(dateUtil.yesterdayDateTime());\n      setProviderDatetimeTo(dateUtil.todayDateTime());\n      setCreatedDatetimeFrom(dateUtil.yesterdayDateTime());\n      setCreatedDatetimeTo(dateUtil.todayDateTime());\n    },\n    []\n  );\n\n  React.useEffect(\n    () => {\n      return () => resetCurrencyRates();\n    },\n    [resetCurrencyRates]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n        rateProvider: currencyRatesProvidersOptions.find(el => el.value === 'custom'),\n        providerDatetimeFrom,\n        providerDatetimeTo,\n        createdDatetimeFrom,\n        createdDatetimeTo,\n      };\n    },\n    [\n      institutionsOptions,\n      providerDatetimeFrom,\n      providerDatetimeTo,\n      createdDatetimeFrom,\n      createdDatetimeTo,\n    ]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Currency Rates\"\n      data={currencyRatesData}\n      columns={tableColumns}\n      newModalName={modalNamesConst.ADD_CURRENCY_RATE}\n      viewingModalName={modalNamesConst.EDIT_CURRENCY_RATE}\n      filterAction={filterCurrencyRates}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <CurrencyRatesFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default CurrencyRates;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport CurrencyRates from './CurrencyRates';\n\nimport {\n  currencyRatesSelector,\n  handleFilterCurrencyRates,\n  isLoadingCurrencyRatesSelector,\n  IStoreState,\n  resetCurrencyRates,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isLoadingCurrencyRatesSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  currencyRatesData: currencyRatesSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterCurrencyRates: handleFilterCurrencyRates,\n    resetCurrencyRates,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CurrencyRates);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { modalNamesConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { CustomersFilter } from './forms';\n\nimport {\n  ICustomer,\n  THandleFilterAccountsById,\n  THandleFilterCardsById,\n  THandleFilterCustomers,\n  THandleFilterStatementsById,\n  THandleFilterTransactionsById,\n  TResetCustomers,\n} from 'store';\n\nimport { ISelectValue } from 'types';\n\ninterface ICustomers {\n  currentId: number;\n  customers: ImmutableArray<ICustomer>;\n  filterAccountsById: THandleFilterAccountsById;\n  filterCardsById: THandleFilterCardsById;\n  filterCustomers: THandleFilterCustomers;\n  filterStatementsById: THandleFilterStatementsById;\n  filterTransactionsById: THandleFilterTransactionsById;\n  institutionsOptions: Array<ISelectValue>;\n  isLoading: boolean;\n  isReadOnly: boolean;\n  resetCustomers: TResetCustomers;\n}\n\nconst Customers: React.FC<ICustomers> = ({\n  institutionsOptions,\n  customers,\n  filterCustomers,\n  currentId,\n  filterCardsById,\n  filterTransactionsById,\n  filterStatementsById,\n  filterAccountsById,\n  resetCustomers,\n  isLoading,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetCustomers();\n    },\n    [resetCustomers]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      { isDivider: true },\n      {\n        name: 'Accounts',\n        action: () => filterAccountsById({ customer_id: currentId }),\n      },\n      {\n        name: 'Cards',\n        action: () => filterCardsById({ customer_id: currentId }),\n      },\n      {\n        name: 'Statements',\n        action: () => filterStatementsById({ customer_id: currentId }),\n      },\n      {\n        name: 'Transactions',\n        action: () => filterTransactionsById({ customer_id: currentId }),\n      },\n    ],\n    [\n      filterTransactionsById,\n      filterStatementsById,\n      filterCardsById,\n      filterAccountsById,\n      currentId,\n    ]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n      };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Customers\"\n      data={customers}\n      columns={tableColumns}\n      newModalName={modalNamesConst.ADD_CUSTOMER}\n      viewingModalName={modalNamesConst.EDIT_CUSTOMER}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterCustomers}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <CustomersFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default Customers;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Customers from './Customers';\n\nimport {\n  activeItemIdSelector,\n  customersSelector,\n  handleFilterByIdAccounts,\n  handleFilterByIdCards,\n  handleFilterByIdStatements,\n  handleFilterByIdTransactions,\n  handleFilterCustomers,\n  isLoadingCustomersSelector,\n  isReadOnlySelector,\n  IStoreState,\n  resetCustomers,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isLoadingCustomersSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  customers: customersSelector(state),\n  currentId: activeItemIdSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterCustomers: handleFilterCustomers,\n    filterCardsById: handleFilterByIdCards,\n    filterTransactionsById: handleFilterByIdTransactions,\n    filterStatementsById: handleFilterByIdStatements,\n    filterAccountsById: handleFilterByIdAccounts,\n    resetCustomers,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Customers);\n","import React from 'react';\nimport { CellInfo } from 'react-table';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { Flex } from '@rebass/grid';\n\nimport { Button } from 'components';\nimport { tableColumns } from './components';\nimport { StatementsFilter } from './forms';\n\nimport { iconNamesConst, modalNamesConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\n\nimport {\n  IStatement,\n  THandleDownloadStatement,\n  THandleFilterAccountsById,\n  THandleFilterCardsById,\n  THandleFilterCustomersById,\n  THandleFilterStatements,\n  THandleFilterTransactionsById,\n  TResetStatements,\n  TSetActiveItemId,\n} from 'store';\n\nimport { ISelectValue } from 'types';\nimport { dateUtil } from 'utils';\n\ninterface IStatements {\n  currentId: number;\n  filterAccountsById: THandleFilterAccountsById;\n  filterCardsById: THandleFilterCardsById;\n  filterCustomersById: THandleFilterCustomersById;\n  filterStatements: THandleFilterStatements;\n  filterTransactionsById: THandleFilterTransactionsById;\n  downloadStatement: THandleDownloadStatement;\n  institutionsOptions: Array<ISelectValue>;\n  isLoading: boolean;\n  isLoadingStatement: boolean;\n  resetStatements: TResetStatements;\n  setActiveItemId: TSetActiveItemId;\n  statements: ImmutableArray<IStatement>;\n}\n\nconst Statements: React.FC<IStatements> = ({\n  currentId,\n  filterAccountsById,\n  filterCardsById,\n  filterCustomersById,\n  filterStatements,\n  filterTransactionsById,\n  downloadStatement,\n  institutionsOptions,\n  isLoading,\n  isLoadingStatement,\n  resetStatements,\n  setActiveItemId,\n  statements,\n}) => {\n  const [dateFrom, setDateFrom] = React.useState(null);\n  const [dateTo, setDateTo] = React.useState(null);\n\n  React.useEffect(\n    () => {\n      setDateFrom(dateUtil.yesterdayDate());\n      setDateTo(dateUtil.todayDate());\n\n      return () => resetStatements();\n    },\n    [resetStatements]\n  );\n\n  const handleClickOnPdfReportButton = React.useCallback(\n    statementId => {\n      setActiveItemId(statementId);\n      downloadStatement();\n      setTimeout(() => setActiveItemId(null), 100);\n    },\n    [setActiveItemId, downloadStatement]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      { isDivider: true },\n      {\n        name: 'Open pdf statement',\n        icon: iconNamesConst.FILE_PDF,\n        action: downloadStatement,\n      },\n      { isDivider: true },\n      {\n        name: 'Accounts',\n        action: () => filterAccountsById({ statement_id: currentId }),\n      },\n      {\n        name: 'Customers',\n        action: () => filterCustomersById({ statement_id: currentId }),\n      },\n      {\n        name: 'Cards',\n        action: () => filterCardsById({ statement_id: currentId }),\n      },\n      {\n        name: 'Transactions',\n        action: () => filterTransactionsById({ statement_id: currentId }),\n      },\n    ],\n    [\n      currentId,\n      filterCustomersById,\n      filterTransactionsById,\n      filterCardsById,\n      filterAccountsById,\n      downloadStatement,\n    ]\n  );\n\n  const statementsTableColumns = React.useMemo(\n    () => {\n      return [\n        {\n          maxWidth: 50,\n          accessor: 'openPdfButton',\n          Cell: (cellInfo: CellInfo) => (\n            <Flex\n              justifyContent=\"center\"\n              width=\"100%\"\n            >\n              <Button\n                iconName={iconNamesConst.FILE_PDF}\n                onClick={() => handleClickOnPdfReportButton(cellInfo.original.id)}\n                title=\"Open pdf statement\"\n                isLoading={isLoadingStatement}\n              />\n            </Flex>\n          ),\n        },\n        ...tableColumns,\n      ];\n    },\n    [handleClickOnPdfReportButton, isLoadingStatement]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n        statementsDateFrom: dateFrom,\n        statementsDateTo: dateTo,\n      };\n    },\n    [institutionsOptions, dateFrom, dateTo]\n  );\n\n  return (\n    <PageTemplate\n      columns={statementsTableColumns}\n      contextMenuItems={contextMenuItems}\n      data={statements}\n      filterAction={filterStatements}\n      initialFilterValues={initialFilterValues}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      title=\"Statements\"\n      viewingModalName={modalNamesConst.STATEMENTS}\n      FilterForm={\n        <StatementsFilter\n          institutionsOptions={institutionsOptions}\n          isDisabled={isLoading}\n        />\n      }\n    />\n  );\n};\n\nexport default Statements;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Statements from './Statements';\n\nimport {\n  activeItemIdSelector,\n  handleDownloadStatement,\n  handleFilterByIdAccounts,\n  handleFilterByIdCards,\n  handleFilterByIdCustomers,\n  handleFilterByIdTransactions,\n  handleFilterStatements,\n  isStatementsLoadingSelector,\n  IStoreState,\n  isTransArsLoadingSelector,\n  resetStatements,\n  setActiveItemId,\n  statementsSelector,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  currentId: activeItemIdSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  isLoading: isStatementsLoadingSelector(state),\n  isLoadingStatement: isTransArsLoadingSelector(state),\n  statements: statementsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterAccountsById: handleFilterByIdAccounts,\n    filterCardsById: handleFilterByIdCards,\n    filterCustomersById: handleFilterByIdCustomers,\n    filterStatements: handleFilterStatements,\n    filterTransactionsById: handleFilterByIdTransactions,\n    downloadStatement: handleDownloadStatement,\n    resetStatements,\n    setActiveItemId,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Statements);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { iconNamesConst, modalNamesConst, permissionTypesConst, uiItemsConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { TransactionsFilter } from './forms';\n\nimport { IWithModal, withModal } from 'HOCs';\n\nimport {\n  ITransaction,\n  IUiItem,\n  THandleFilterAccountsById,\n  THandleFilterCardsById,\n  THandleFilterCustomersById,\n  THandleFilterStatementsById,\n  THandleFilterTransactions,\n  TResetTransactions,\n} from 'store';\n\nimport { ISelectValue } from 'types';\nimport { dateUtil } from 'utils';\n\ninterface ITransactions extends IWithModal {\n  currentId: number;\n  filterAccountsById: THandleFilterAccountsById;\n  filterCardsById: THandleFilterCardsById;\n  filterCustomersById: THandleFilterCustomersById;\n  filterStatementsById: THandleFilterStatementsById;\n  filterTransactions: THandleFilterTransactions;\n  institutionsOptions: Array<ISelectValue>;\n  isConvertibleToLoan: boolean;\n  isSettledTr: boolean;\n  isLoading: boolean;\n  resetTransactions: TResetTransactions;\n  transactions: ImmutableArray<ITransaction>;\n  uiItems: Array<IUiItem>;\n}\n\nconst Transactions: React.FC<ITransactions> = ({\n  currentId,\n  filterAccountsById,\n  filterCardsById,\n  filterCustomersById,\n  filterStatementsById,\n  filterTransactions,\n  institutionsOptions,\n  isConvertibleToLoan,\n  isSettledTr,\n  isLoading,\n  openModal,\n  resetTransactions,\n  transactions,\n  uiItems,\n}) => {\n  const [dateTimeFrom, setDateTimeFrom] = React.useState(null);\n  const [dateTimeTo, setDateTimeTo] = React.useState(null);\n\n  React.useEffect(\n    () => {\n      setDateTimeFrom(dateUtil.yesterdayDateTime());\n      setDateTimeTo(dateUtil.todayDateTime());\n\n      return () => resetTransactions();\n    },\n    [resetTransactions]\n  );\n\n  const isReadOnlySettleTr = React.useMemo(\n    () => {\n      const uiItem = uiItems.find(item => item.id === uiItemsConst.SETTLE_TRANSACTION);\n\n      if (!uiItem) {\n        return false;\n      }\n\n      return uiItem.permission === permissionTypesConst.READ_ONLY;\n    },\n    [uiItems]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => {\n      const baseItems = [\n        { isDivider: true },\n        {\n          name: 'Accounts',\n          action: () => filterAccountsById({ transaction_id: currentId }),\n        },\n        {\n          name: 'Customers',\n          action: () => filterCustomersById({ transaction_id: currentId }),\n        },\n        {\n          name: 'Cards',\n          action: () => filterCardsById({ transaction_id: currentId }),\n        },\n        {\n          name: 'Statements',\n          action: () => filterStatementsById({ transaction_id: currentId }),\n        },\n      ];\n\n      const convertItems = [\n        { isDivider: true },\n        {\n          name: 'Convert to Loan',\n          icon: iconNamesConst.LOAN,\n          action: () => openModal({\n            name: modalNamesConst.TRANSACTION,\n            payload: { activeTab: 2 },\n          }),\n        },\n      ];\n\n      const settleTrItems = [\n        { isDivider: true },\n        {\n          name: 'Settle Transaction',\n          isDisabled: isReadOnlySettleTr,\n          action: () => openModal({\n            name: modalNamesConst.SETTLE_TRANSACTION,\n            payload: { transactionId: currentId },\n          }),\n        },\n      ];\n\n      if (isConvertibleToLoan && !isSettledTr) {\n        return [...baseItems, ...settleTrItems, ...convertItems];\n      } else {\n        if (isConvertibleToLoan) {\n          return [...baseItems, ...convertItems];\n        }\n\n        if (!isSettledTr) {\n          return [...baseItems, ...settleTrItems];\n        }\n      }\n\n      return baseItems;\n    },\n    [\n      isConvertibleToLoan,\n      currentId,\n      filterAccountsById,\n      filterCardsById,\n      filterCustomersById,\n      filterStatementsById,\n      openModal,\n      isReadOnlySettleTr,\n      isSettledTr,\n    ]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n        transactionsDateTimeFrom: dateTimeFrom,\n        transactionsDateTimeTo: dateTimeTo,\n      };\n    },\n    [institutionsOptions, dateTimeFrom, dateTimeTo]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Transactions\"\n      data={transactions}\n      columns={tableColumns}\n      viewingModalName={modalNamesConst.TRANSACTION}\n      filterAction={filterTransactions}\n      contextMenuItems={contextMenuItems}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <TransactionsFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default withModal(Transactions);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Transactions from './Transactions';\n\nimport {\n  activeItemIdSelector,\n  handleFilterByIdAccounts,\n  handleFilterByIdCards,\n  handleFilterByIdCustomers,\n  handleFilterByIdStatements,\n  handleFilterTransactions,\n  isLoadingTransactionsSelector,\n  isSettledTrSelector,\n  IStoreState,\n  isTrConvertibleToLoanSelector,\n  resetTransactions,\n  transactionsSelector,\n  uiItemsSelector,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isLoadingTransactionsSelector(state),\n  transactions: transactionsSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  currentId: activeItemIdSelector(state),\n  isConvertibleToLoan: isTrConvertibleToLoanSelector(state),\n  isSettledTr: isSettledTrSelector(state),\n  uiItems: uiItemsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterTransactions: handleFilterTransactions,\n    filterCardsById: handleFilterByIdCards,\n    filterStatementsById: handleFilterByIdStatements,\n    filterCustomersById: handleFilterByIdCustomers,\n    filterAccountsById: handleFilterByIdAccounts,\n    resetTransactions,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Transactions);\n"],"sourceRoot":""}