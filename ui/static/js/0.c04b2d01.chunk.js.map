{"version":3,"sources":["containers/PageTemplate/EditableTable.tsx","containers/PageTemplate/withEditTable.tsx","containers/PageTemplate/Filter/Filter.tsx","containers/PageTemplate/Filter/index.ts","containers/PageTemplate/PageTemplate.tsx","containers/PageTemplate/index.ts","containers/Admin/Endpoints/Endpoints.tsx","containers/Admin/Endpoints/index.ts","containers/Admin/Institutions/components/tableColumns.tsx","containers/Admin/Institutions/Institutions.tsx","containers/Admin/Institutions/index.ts","containers/Admin/Interfaces/Interfaces.tsx","containers/Admin/Interfaces/index.ts","containers/Admin/Scheduler/components/tableColumns.tsx","containers/Admin/Scheduler/Scheduler.tsx","containers/Admin/Scheduler/index.ts","containers/Admin/SystemProperties/components/tableColumns.tsx","containers/Admin/SystemProperties/SystemProperties.tsx","containers/Admin/SystemProperties/index.ts","containers/Admin/Permission/Users/components/tableColumns.tsx","containers/Admin/Permission/Users/Users.tsx","containers/Admin/Permission/Users/index.ts","containers/Admin/Permission/UsersGroups/UsersGroups.tsx","containers/Admin/Permission/UsersGroups/index.ts","containers/Admin/Dictionaries/Countries/tableColumns.tsx","containers/Admin/Dictionaries/Countries/Countries.tsx","containers/Admin/Dictionaries/Countries/index.ts","containers/Admin/Dictionaries/Currencies/tableColumns.tsx","containers/Admin/Dictionaries/Currencies/Currencies.tsx","containers/Admin/Dictionaries/Currencies/index.ts","containers/Admin/Dictionaries/EventDataElems/EventDataElemsFilter.tsx","containers/Admin/Dictionaries/EventDataElems/tableColumns.tsx","containers/Admin/Dictionaries/EventDataElems/EventDataElems.tsx","containers/Admin/Dictionaries/EventDataElems/index.ts","containers/Admin/Dictionaries/Events/tableColumns.tsx","containers/Admin/Dictionaries/Events/Events.tsx","containers/Admin/Dictionaries/Events/index.ts","containers/Admin/Dictionaries/TransactionTypes/tableColumns.tsx","containers/Admin/Dictionaries/TransactionTypes/TransactionTypes.tsx","containers/Admin/Dictionaries/TransactionTypes/index.ts"],"names":["withEditTable","Component","WithEditTable","props","activeTableRowIndex","contextMenuItems","handleOpenModal","modalsStateList","handleSetActiveItemId","onRowClick","handleSetActiveTableRowIndex","viewingModalName","originProps","React","useState","isOpenedModal","setIsOpenedModal","isVisibleContextMenu","setIsVisibleContextMenu","handleRemoveActiveIds","useCallback","useEffect","isSomeModalOpened","modalsList","find","modal","name","openCurrentRowInModal","onContextMenuClick","e","value","withConfirmation","modalNamesConst","CONFIRMATION","payload","confirmationAction","action","confirmationTitle","confirmationText","menuItems","useMemo","openItem","icon","iconNamesConst","EDIT","handleClickOnRow","_","rowInfo","isLocked","original","lockedFlag","id","rowIndexOriginal","index","rowIndex","page","pageSize","onDoubleClick","onContextMenu","length","className","Fragment","disable","menuId","onClick","items","isHidden","onHide","displayName","componentUtil","getDisplayName","connect","state","activeTableRowIndexSelector","modalsStateListSelector","dispatch","bindActionCreators","openModal","setActiveItemId","setActiveTableRowIndex","withSpinner","pageTemplateProps","getTrGroupProps","activeRowIndex","FilterWrapper","styled","div","theme","colors","lighterGray","lighterGrayCell","color","darkGray","filteredFieldsToStore","data","Object","keys","filter","key","match","reduce","obj","reduxForm","form","formNamesConst","FILTER","destroyOnUnmount","enableReinitialize","FilterForm","filterAction","filterValues","handleSubmit","invalid","isAutoRefresh","isLoading","location","setIsAccessibleFiltering","stopAutoRefresh","username","userData","storageUtil","getUserData","hasInstitution","hasTransactionId","hasAccountId","hasCustomerId","hasCardId","hasProductName","hasAccountAlias","hasPanAlias","hasLastName","valuesCount","values","acc","curr","isAccessibleButton","pathname","basePath","uiItemsConst","SYSTEM_PROPERTIES","USERS","SCHEDULER","API_CALLS","USERS_ACTIVITY","ACCOUNTS","CARDS","STATEMENTS","CUSTOMERS","TRANSACTIONS","isDisabled","handleSubmitForm","a","cookiesUtil","set","JSON","stringify","expires","cookiesExpiresConst","MONTH","onSubmit","width","alignItems","flexWrap","m","text","disabled","formValues","getFormValues","isAutoRefreshSelector","Filter","withModal","withRouter","title","columns","newModalName","resetUtils","AdditionalButton","initialFilterValues","setIsOpenFilter","filterData","isOpenFilter","isDownloadButton","isSearchable","uiItems","isReadOnly","setActivePagePermission","isFilterable","setIsFilterable","timer","setInterval","clearInterval","currentUiItem","item","permission","filterButtonText","fileName","split","join","toLowerCase","isData","filterInitialValues","storedFilter","get","parse","isSearchableButton","handleSetIsFilterable","handleSetIsOpenFilter","PageTitle","pageId","mb","iconName","initialValues","fontSize","mr","PLUS","SEARCH","selectable","dropdownListPosition","ToggleButtonComponent","DOWNLOAD","FILE","downloadUtil","downloadCSV","classNames","seconds","ml","size","STOP","mt","EditableTable","filterable","isOpenFilterSelector","isReadOnlySelector","uiItemsSelector","PageTemplate","Endpoints","endpointItems","deleteEndpoint","filterEndpoints","currentEndpointName","currentEndpointId","institutionsOptions","getLogData","resetEndpoints","SHORT_TEXT","systemMonitorTablesConst","ENDPOINTS","DELETE","institutionId","tableColumns","ADD_ENDPOINT","EDIT_ENDPOINT","activeItemIdSelector","currentEndpointNameSelector","endpointsSelector","userInstitutionsOptionsSelector","isSysMonitorLoadingLogDataSelector","isFilteringEndpointsSelector","isDeletingEndpointSelector","handleDeleteEndpoint","handleFilterEndpoints","handleGetLogData","maxWidth","Header","accessor","Cell","isNumber","isDate","renderCheckBoxTableCell","Institutions","currentInstitutionId","currentInstitutionName","deleteInstitution","getInstitutions","institutionsData","resetInstitutions","isMasterInstitution","changeProfileAllowedFlag","yesNoConst","YES","ADD_INSTITUTION","EDIT_INSTITUTION","isGettingInstitutionsSelector","isDeletingInstitutionSelector","institutionsSelector","currentInstitutionNameSelector","handleGetInstitutions","handleDeleteInstitution","Accounts","Interfaces","interfaceItems","deleteInterface","filterInterfaces","resetInterfaces","currentInterfaceName","currentInterfaceId","INTERFACES","ADD_INTERFACE","EDIT_INTERFACE","isFilteringInterfacesSelector","isDeletingInterfaceSelector","interfacesSelector","currentInterfaceNameSelector","handleDeleteInterface","handleFilterInterfaces","isSmaller","filterSchedulerJobs","schedulerJobs","execSchedulerJob","currentSchedulerId","deleteSchedulerJob","currentSchedulerName","resetScheduler","filterScheduledJobsById","SCHEDULER_JOBS","isDivider","scheduler_id","schedulerTasksConsts","EXECUTE_TASK","NAME","taskId","taskCommand","TASK_COMMAND","withAutoRefresh","START","PAUSE","RESUME","ADD_SCHEDULER","EDIT_SCHEDULER","currentSchedulerNameSelector","isSchedulerJobsFilteringSelector","isSchedulerJobUpdatingSelector","isSchedulerJobDeletingSelector","schedulerJobsSelector","handleDeleteSchedulerJob","handleExecSchedulerJob","handleFilterByIdScheduledJobs","handleFilterSchedulerJobs","Scheduler","SystemProperties","sysPropsItems","deleteSysProp","filterSysProps","updateSysProps","currentSysPropId","resetSystemProperties","LOCK","ADD_SYSTEM_PROPERTY","EDIT_SYSTEM_PROPERTY","isSysPropUpdatingSelector","isSysPropDeletingSelector","isSysPropsFilteringSelector","sysPropsSelector","handleDeleteSysProp","handleUpdateSysProps","handleFilterSysProps","Users","currentUserId","filterUsers","filterUsersById","resetUsers","users","user_id","statusActiveFlag","ADD_USER","EDIT_USER","usersSelector","isAddingUserSelector","isUpdatingUserSelector","isFilteringUsersSelector","handleFilterUsers","handleFilterByIdUsersActivity","UsersGroups","getUsersGroups","resetUsersGroups","usersGroups","ADD_USERS_GROUP","EDIT_USERS_GROUP","isAddingUsersGroupSelector","isUpdatingUsersGroupSelector","isLoadingUsersGroupsSelector","usersGroupsSelector","handleGetUsersGroups","onCenter","Countries","countriesData","getCountriesData","dictionaryCountriesSelector","isCountriesLoadingSelector","handleGetDictionaryCountries","Currencies","currenciesData","getCurrenciesData","dictionaryCurrenciesSelector","isCurrenciesLoadingSelector","handleGetDictionaryCurrencies","EventsDataElemsFilter","eventOptions","p","Field","component","SelectField","label","placeholder","options","isRequired","validate","formErrorUtil","EventDataElems","eventDataElemsData","eventsOptions","filterEventDataElems","getEventsData","resetEventDataElems","EventDataElemsFilter","dictionaryEventDataElemsSelector","dictionaryEventsOptionsSelector","isEventDataElemsLoadingSelector","handleGetDictionaryEvents","handleFilterDictionaryEventDataElems","Events","eventsData","dictionaryEventsSelector","isEventsLoadingSelector","TransactionTypes","getTransactionTypesData","transactionTypesData","isTransTypesLoadingSelector","dictionaryTransTypesSelector","handleGetDictionaryTransactionTypes"],"mappings":"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","file":"static/js/0.c04b2d01.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Table, withSpinner } from 'components';\n\nimport { IWithEditTable, withEditTable } from './withEditTable';\n\ninterface IPageTemplate extends IWithEditTable {\n  data: Array<object>;\n  columns: Array<object>;\n  isLoading: boolean;\n}\n\nexport const PageTemplate: React.FC<IPageTemplate> = props => {\n  const { onRowClick, activeTableRowIndex, ...pageTemplateProps } = props;\n\n  return (\n    <Table\n      getTrGroupProps={onRowClick}\n      activeRowIndex={activeTableRowIndex}\n      {...pageTemplateProps}\n    />\n  );\n};\n\nexport default withEditTable(\n  withSpinner()(PageTemplate)\n);\n","import React from 'react';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { connect } from 'react-redux';\nimport { ComponentPropsGetter0, ComponentPropsGetterR, RowInfo } from 'react-table';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { ContextMenuList } from 'components';\n\nimport { iconNamesConst, modalNamesConst } from 'consts';\n\nimport { modalsList } from 'containers/Modals/modalsList';\n\nimport {\n  activeTableRowIndexSelector,\n  IStoreState,\n  modalsStateListSelector,\n  openModal,\n  setActiveItemId,\n  setActiveTableRowIndex,\n  TOpenModal,\n  TSetActiveItemId,\n  TSetActiveTableRowIndex,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\n\nimport { componentUtil } from 'utils';\n\nexport interface IWithEditTable {\n  activeTableRowIndex?: number;\n  contextMenuItems?: Array<IContextMenuItem>;\n  handleOpenModal: TOpenModal;\n  modalsStateList: object;\n  onRowClick: ComponentPropsGetterR | ComponentPropsGetter0;\n  handleSetActiveItemId: TSetActiveItemId;\n  handleSetActiveTableRowIndex: TSetActiveTableRowIndex;\n  viewingModalName: string;\n}\n\nexport const withEditTable = <OriginProps extends {}>(\n  Component: React.ComponentType<OriginProps & Partial<IWithEditTable>>\n) => {\n  const WithEditTable: React.FC<IWithEditTable> = props => {\n    const {\n      activeTableRowIndex,\n      contextMenuItems = [],\n      handleOpenModal,\n      modalsStateList,\n      onRowClick,\n      handleSetActiveItemId,\n      handleSetActiveTableRowIndex,\n      viewingModalName,\n      ...originProps\n    } = props;\n\n    const [isOpenedModal, setIsOpenedModal] = React.useState(null);\n    const [isVisibleContextMenu, setIsVisibleContextMenu] = React.useState(false);\n\n    const handleRemoveActiveIds = React.useCallback(\n      () => {\n        setIsVisibleContextMenu(false);\n\n        handleSetActiveTableRowIndex(null);\n        handleSetActiveItemId(null);\n      },\n      [handleSetActiveTableRowIndex, handleSetActiveItemId]\n    );\n\n    React.useEffect(\n      () => {\n        const isSomeModalOpened = modalsList.find(modal => modalsStateList[`is${modal.name}`]);\n\n        setIsOpenedModal(isSomeModalOpened);\n      },\n      [modalsStateList]\n    );\n\n    React.useEffect(\n      () => {\n        if (!isOpenedModal) {\n          handleRemoveActiveIds();\n        }\n      },\n      [isOpenedModal, handleRemoveActiveIds]\n    );\n\n    const openCurrentRowInModal = React.useCallback(\n      () => handleOpenModal({ name: viewingModalName }),\n      [handleOpenModal, viewingModalName]\n    );\n\n    const onContextMenuClick = React.useCallback(\n      (e: Event, value: IContextMenuItem) => {\n        value.withConfirmation\n          ? handleOpenModal({\n            name: modalNamesConst.CONFIRMATION,\n            payload: {\n              confirmationAction: value.action,\n              confirmationTitle: value.confirmationTitle,\n              confirmationText: value.confirmationText,\n            },\n          })\n          : value.action();\n      },\n      [handleOpenModal]\n    );\n\n    const menuItems = React.useMemo(\n      () => {\n        const openItem = {\n          name: 'Open',\n          icon: iconNamesConst.EDIT,\n          action: () => openCurrentRowInModal(),\n        };\n\n        return viewingModalName ? [openItem, ...contextMenuItems] : contextMenuItems;\n      },\n      [contextMenuItems, viewingModalName, openCurrentRowInModal]\n    );\n\n    const handleClickOnRow = React.useCallback(\n      (_, rowInfo: RowInfo) => {\n        const isLocked = rowInfo.original.lockedFlag;\n        const id = rowInfo.original.id;\n        const rowIndexOriginal = rowInfo.index + 1; // from 1 for css style\n        const rowIndex = rowInfo.page\n          ? rowIndexOriginal - rowInfo.pageSize * rowInfo.page\n          : rowIndexOriginal; // considering page number\n\n        return {\n          onDoubleClick: () => {\n            if (viewingModalName) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              openCurrentRowInModal();\n            }\n          },\n          onContextMenu: () => {\n            if (menuItems.length) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              setIsVisibleContextMenu(true);\n            }\n          },\n          className: isLocked && 'is-gray',\n        };\n      },\n      [\n        openCurrentRowInModal,\n        viewingModalName,\n        menuItems,\n        handleSetActiveItemId,\n        handleSetActiveTableRowIndex,\n      ]\n    );\n\n    return (\n      <React.Fragment>\n        <ContextMenuTrigger\n          id=\"tableContextMenu\"\n          disable={!menuItems.length}\n        >\n          <Component\n            onRowClick={handleClickOnRow}\n            activeTableRowIndex={activeTableRowIndex}\n            {...originProps as OriginProps}\n          />\n        </ContextMenuTrigger>\n        <ContextMenuList\n          menuId=\"tableContextMenu\"\n          onClick={onContextMenuClick}\n          items={menuItems}\n          isHidden={isOpenedModal || !isVisibleContextMenu}\n          onHide={(!isOpenedModal && activeTableRowIndex) ? handleRemoveActiveIds : null}\n        />\n      </React.Fragment>\n    );\n  };\n\n  WithEditTable.displayName = `WithEditTable(${componentUtil.getDisplayName(Component)})`;\n\n  const mapStateToProps = (state: IStoreState) => ({\n    activeTableRowIndex: activeTableRowIndexSelector(state),\n    modalsStateList: modalsStateListSelector(state),\n  });\n\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n    {\n      handleOpenModal: openModal,\n      handleSetActiveItemId: setActiveItemId,\n      handleSetActiveTableRowIndex: setActiveTableRowIndex,\n    },\n    dispatch\n  );\n\n  return connect<Partial<IWithEditTable>, Partial<IWithEditTable>, any, IStoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n  )(WithEditTable);\n};\n","import React, { ReactChild } from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport { Flex } from '@rebass/grid';\nimport * as H from 'history';\n\nimport styled from 'theme';\n\nimport { Button } from 'components';\n\nimport { basePath, cookiesExpiresConst, formNamesConst, uiItemsConst } from 'consts';\n\nimport { TSetIsAccessibleFiltering, TStopAutoRefresh } from 'store';\n\nimport { cookiesUtil, storageUtil } from 'utils';\n\ninterface IFilterWrapper {\n  isHidden: boolean;\n}\n\nconst FilterWrapper = styled.div<IFilterWrapper>`\n  margin-bottom: 15px;\n  padding: 10px 15px 12px;\n  border: 1px solid ${({ theme }) => theme.colors.lighterGray};\n  border-radius: 2px;\n  background-color: ${({ theme }) => theme.colors.lighterGrayCell};\n\n  .title {\n    font-size: 18px;\n    color: ${({ theme, color }) => color || theme.colors.darkGray};\n    font-weight: bold;\n  }\n\n  ${({ isHidden }) => isHidden && `\n    display: none;\n  `};\n`;\n\ninterface IFilter {\n  filterAction: () => void;\n  filterValues: object;\n  isAutoRefresh: boolean;\n  isHidden: boolean;\n  isLoading: boolean;\n  location: H.Location;\n  setIsAccessibleFiltering: TSetIsAccessibleFiltering;\n  stopAutoRefresh: TStopAutoRefresh;\n  FilterForm: ReactChild;\n}\n\nexport const filteredFieldsToStore = (data: object) => {\n  return data && Object.keys(data)\n    .filter(key => !key.match(/dateFrom|dateTo|dateTimeFrom|dateTimeTo/gi))\n    .reduce(\n      (obj, key) => {\n        obj[key] = data[key];\n        return obj;\n      },\n      {}\n    );\n};\n\ntype TFilter = IFilter & InjectedFormProps<{}, IFilter>;\n\nconst Filter: React.FC<TFilter> = ({\n  FilterForm,\n  filterAction,\n  filterValues,\n  handleSubmit,\n  invalid,\n  isAutoRefresh,\n  isHidden,\n  isLoading,\n  location,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n}) => {\n  const username = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      return userData && userData.username;\n    },\n    []\n  );\n\n  const hasInstitution = React.useMemo(\n    () => filterValues && filterValues['institutionId'],\n    [filterValues]\n  );\n\n  const hasTransactionId = React.useMemo(\n    () => filterValues && filterValues['transactionId'],\n    [filterValues]\n  );\n\n  const hasAccountId = React.useMemo(\n    () => filterValues && filterValues['accountId'],\n    [filterValues]\n  );\n\n  const hasCustomerId = React.useMemo(\n    () => filterValues && filterValues['customerId'],\n    [filterValues]\n  );\n\n  const hasCardId = React.useMemo(\n    () => filterValues && filterValues['cardId'],\n    [filterValues]\n  );\n\n  const hasProductName = React.useMemo(\n    () => filterValues && filterValues['productName'],\n    [filterValues]\n  );\n\n  const hasAccountAlias = React.useMemo(\n    () => filterValues && filterValues['accountAlias'],\n    [filterValues]\n  );\n\n  const hasPanAlias = React.useMemo(\n    () => filterValues && filterValues['panAlias'],\n    [filterValues]\n  );\n\n  const hasLastName = React.useMemo(\n    () => filterValues && filterValues['lastName'],\n    [filterValues]\n  );\n\n  const valuesCount = React.useMemo(\n    () => filterValues\n      && Object.values(filterValues).reduce((acc, curr) => curr ? ++acc : acc, 0),\n    [filterValues]\n  );\n\n  const isAccessibleButton = React.useCallback(\n    () => {\n      switch (location.pathname) {\n        case `${basePath}${uiItemsConst.SYSTEM_PROPERTIES}`:\n        case `${basePath}${uiItemsConst.USERS}`:\n        case `${basePath}${uiItemsConst.SCHEDULER}`:\n          return valuesCount >= 0;\n\n        case `${basePath}${uiItemsConst.API_CALLS}`:\n        case `${basePath}${uiItemsConst.USERS_ACTIVITY}`:\n          return valuesCount > 1;\n\n        case `${basePath}${uiItemsConst.ACCOUNTS}`:\n          return hasInstitution && (hasAccountId || hasAccountAlias || hasLastName);\n\n        case `${basePath}${uiItemsConst.CARDS}`:\n          return hasInstitution && (hasAccountId || hasCardId || hasCustomerId || hasPanAlias);\n\n        case `${basePath}${uiItemsConst.STATEMENTS}`:\n          return hasInstitution && (hasAccountId || hasAccountAlias || hasLastName);\n\n        case `${basePath}${uiItemsConst.CUSTOMERS}`:\n          return hasInstitution && (hasCustomerId || hasLastName);\n\n        case `${basePath}${uiItemsConst.TRANSACTIONS}`:\n          return hasInstitution && (\n            hasTransactionId\n            || hasProductName\n            || hasCustomerId\n            || hasAccountId\n          );\n\n        default:\n          return valuesCount > 0;\n      }\n    },\n    [\n      hasInstitution,\n      hasAccountId,\n      hasCustomerId,\n      hasCardId,\n      hasTransactionId,\n      hasAccountAlias,\n      hasPanAlias,\n      hasLastName,\n      hasProductName,\n      valuesCount,\n      location,\n    ]\n  );\n\n  const isDisabled = React.useMemo(\n    () => invalid || !isAccessibleButton(),\n    [isAccessibleButton, invalid]\n  );\n\n  React.useEffect(\n    () => {\n      setIsAccessibleFiltering(!isDisabled);\n    },\n    [isDisabled, setIsAccessibleFiltering]\n  );\n\n  // eslint-disable-next-line\n  const handleSubmitForm = React.useCallback(\n    handleSubmit(async data => {\n      await filterAction();\n\n      if (isAutoRefresh) {\n        stopAutoRefresh();\n      }\n\n      cookiesUtil.set(\n        `${location.pathname}-${username}`,\n        JSON.stringify(filteredFieldsToStore(data)),\n        { expires: cookiesExpiresConst.MONTH }\n      );\n    }),\n    [handleSubmit, filterAction, isAutoRefresh, stopAutoRefresh]\n  );\n\n  return (\n    <FilterWrapper isHidden={isHidden}>\n      <div className=\"title\">Filter</div>\n      <form onSubmit={handleSubmitForm}>\n        <Flex\n          width=\"960px\"\n          alignItems=\"flex-end\"\n          flexWrap=\"wrap\"\n          m=\"0 -8px 5px\"\n        >\n          {FilterForm}\n        </Flex>\n        <Button\n          text=\"Show\"\n          isLoading={isLoading}\n          disabled={isDisabled}\n        />\n      </form>\n    </FilterWrapper >\n  );\n};\n\nexport default reduxForm<{}, IFilter>({\n  form: formNamesConst.FILTER,\n  // keepDirtyOnReinitialize: true,\n  destroyOnUnmount: false,\n  enableReinitialize: true,\n})(Filter);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { getFormValues } from 'redux-form';\n\nimport { formNamesConst } from 'consts';\n\nimport Filter from './Filter';\n\nimport {\n  isAutoRefreshSelector,\n  IStoreState,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n} from 'store';\n\nconst formValues = getFormValues(formNamesConst.FILTER);\n\nconst mapStateToProps = (state: IStoreState) => ({\n  filterValues: formValues(state),\n  isAutoRefresh: isAutoRefreshSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    setIsAccessibleFiltering,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Filter);\n","import React, { ReactChild } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\n\nimport { Box, Flex } from '@rebass/grid';\n\nimport { Button, CountDownTimer, Dropdown, DropdownOption } from 'components';\nimport { IWithModal, withModal } from 'HOCs';\n\nimport { basePath, iconNamesConst } from 'consts';\n\nimport EditableTable from './EditableTable';\nimport Filter from './Filter';\nimport PageTitle from './PageTitle';\n\nimport {\n  IUiItem,\n  TResetUtils,\n  TSetActivePagePermission,\n  TSetIsOpenFilter,\n  TStopAutoRefresh,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\nimport { cookiesUtil, downloadUtil, storageUtil } from 'utils';\n\ninterface PageTemplateProps extends RouteComponentProps, IWithModal {\n  AdditionalButton?: ReactChild;\n  columns: Array<object>;\n  contextMenuItems?: Array<IContextMenuItem>;\n  data: Array<object>;\n  filterAction?: () => void;\n  filterData: object;\n  FilterForm?: ReactChild;\n  initialFilterValues?: object;\n  isAutoRefresh?: boolean;\n  isDownloadButton?: boolean;\n  isLoading: boolean;\n  isOpenFilter: boolean;\n  isReadOnly: boolean;\n  isSearchable?: boolean;\n  newModalName?: string;\n  resetUtils: TResetUtils;\n  setActivePagePermission: TSetActivePagePermission;\n  setIsOpenFilter: TSetIsOpenFilter;\n  stopAutoRefresh: TStopAutoRefresh;\n  title: string;\n  uiItems: Array<IUiItem>;\n}\n\nexport const PageTemplate: React.FC<PageTemplateProps> = props => {\n  const {\n    title,\n    data,\n    columns,\n    FilterForm,\n    filterAction,\n    openModal,\n    newModalName,\n    location,\n    isAutoRefresh,\n    stopAutoRefresh,\n    resetUtils,\n    AdditionalButton,\n    initialFilterValues,\n    filterData,\n    setIsOpenFilter,\n    isOpenFilter,\n    isDownloadButton,\n    isSearchable,\n    uiItems,\n    isReadOnly,\n    isLoading,\n    setActivePagePermission,\n    ...pageTemplateProps\n  } = props;\n\n  const [isFilterable, setIsFilterable] = React.useState(false);\n\n  React.useEffect(\n    () => {\n      const timer = isAutoRefresh && setInterval(() => filterAction(), 5000);\n\n      return () => clearInterval(timer);\n    },\n    [isAutoRefresh, filterAction]\n  );\n\n  const currentUiItem = React.useMemo(\n    () => uiItems.find(item => `${basePath}${item.id}` === `${location.pathname}`),\n    [location, uiItems]\n  );\n\n  React.useEffect(\n    () => {\n      const permission = currentUiItem && currentUiItem.permission;\n\n      setActivePagePermission(permission);\n    },\n    [setActivePagePermission, uiItems, location, currentUiItem]\n  );\n\n  React.useEffect(\n    () => {\n      return () => resetUtils();\n    },\n    [resetUtils]\n  );\n\n  const filterButtonText = React.useMemo(\n    () => isOpenFilter ? 'Hide Filter' : 'Show Filter',\n    [isOpenFilter]\n  );\n\n  const fileName = React.useMemo(\n    () => title.split(' ').join('_').toLowerCase(),\n    [title]\n  );\n\n  const isData = React.useMemo(\n    () => data && data.length,\n    [data]\n  );\n\n  const filterInitialValues = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      const username = userData && userData.username;\n\n      const storedFilter = cookiesUtil.get(`${location.pathname}-${username}`);\n\n      return {\n        ...initialFilterValues,\n        ...(storedFilter ? JSON.parse(storedFilter) : {}),\n      };\n    },\n    [initialFilterValues, location]\n  );\n\n  const isSearchableButton = React.useMemo(\n    () => isSearchable && data && data.length > 10,\n    [isSearchable, data]\n  );\n\n  const handleSetIsFilterable = React.useCallback(\n    () => setIsFilterable(!isFilterable),\n    [isFilterable]\n  );\n\n  const handleSetIsOpenFilter = React.useCallback(\n    () => setIsOpenFilter(!isOpenFilter),\n    [setIsOpenFilter, isOpenFilter]\n  );\n\n  const handleOpenModal = React.useCallback(\n    () => openModal({ name: newModalName }),\n    [openModal, newModalName]\n  );\n\n  return (\n    <React.Fragment>\n      <PageTitle\n        title={title}\n        pageId={currentUiItem && currentUiItem.id}\n      />\n      {FilterForm && (\n        <Box mb=\"5px\">\n          <Button\n            text={filterButtonText}\n            iconName={iconNamesConst.FILTER}\n            onClick={handleSetIsOpenFilter}\n          />\n        </Box>\n      )}\n      {FilterForm && (\n        <Filter\n          filterAction={filterAction}\n          initialValues={filterInitialValues}\n          isHidden={!isOpenFilter}\n          isLoading={isLoading}\n          location={location}\n          FilterForm={FilterForm}\n        />\n      )}\n      <Flex alignItems=\"center\" fontSize=\"0px\">\n        {newModalName && !isReadOnly && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Add New\"\n              iconName={iconNamesConst.PLUS}\n              onClick={handleOpenModal}\n              disabled={isLoading}\n            />\n          </Box>\n        )}\n        {isSearchableButton && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Search\"\n              disabled={!isData || isLoading}\n              iconName={iconNamesConst.SEARCH}\n              onClick={handleSetIsFilterable}\n            />\n          </Box>\n        )}\n        {AdditionalButton && (\n          <Box mr=\"20px\">\n            {AdditionalButton}\n          </Box>\n        )}\n        {isDownloadButton && (\n          <Box mr=\"20px\">\n            <Dropdown\n              selectable={false}\n              isDisabled={!isData}\n              dropdownListPosition=\"center\"\n              ToggleButtonComponent={(\n                <Button\n                  text=\"Download\"\n                  iconName={iconNamesConst.DOWNLOAD}\n                  disabled={isLoading}\n                />\n              )}\n            >\n              <DropdownOption>\n                <Button\n                  text=\".csv\"\n                  iconName={iconNamesConst.FILE}\n                  onClick={() => downloadUtil.downloadCSV(fileName, data)}\n                  classNames={['no-text-transform']}\n                  disabled={isLoading}\n                />\n              </DropdownOption>\n            </Dropdown>\n          </Box>\n        )}\n        {isAutoRefresh && (\n          <Flex alignItems=\"flex-end\">\n            <CountDownTimer seconds={5} />\n            <Box ml=\"4px\">\n              <Button\n                text=\"Stop Auto Refreshing\"\n                size=\"11\"\n                iconName={iconNamesConst.STOP}\n                onClick={stopAutoRefresh}\n                disabled={isLoading}\n              />\n            </Box>\n          </Flex>\n        )}\n      </Flex>\n      <Box mt=\"5px\">\n        <EditableTable\n          data={data}\n          columns={columns}\n          filterable={isFilterable}\n          isLoading={isLoading}\n          {...pageTemplateProps}\n        />\n      </Box>\n    </React.Fragment >\n  );\n};\n\nexport default withModal(\n  withRouter(PageTemplate)\n);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport PageTemplate from './PageTemplate';\n\nimport {\n  isAutoRefreshSelector,\n  isOpenFilterSelector,\n  isReadOnlySelector,\n  IStoreState,\n  resetUtils,\n  setActivePagePermission,\n  setIsOpenFilter,\n  stopAutoRefresh,\n  uiItemsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isAutoRefresh: isAutoRefreshSelector(state),\n  isOpenFilter: isOpenFilterSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n  uiItems: uiItemsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    resetUtils,\n    setIsOpenFilter,\n    setActivePagePermission,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PageTemplate);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { iconNamesConst, modalNamesConst, systemMonitorTablesConst } from 'consts';\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { EndpointsFilter } from './forms';\n\nimport {\n  HandleGetLogData,\n  IEndpoint,\n  THandleDeleteEndpoint,\n  THandleFilterEndpoints,\n  TResetEndpoints,\n} from 'store';\nimport { ISelectValue } from 'types';\n\ninterface IEndpoints {\n  currentEndpointId: number;\n  currentEndpointName: string;\n  deleteEndpoint: THandleDeleteEndpoint;\n  endpointItems: ImmutableArray<IEndpoint>;\n  filterEndpoints: THandleFilterEndpoints;\n  getLogData: HandleGetLogData;\n  institutionsOptions: Array<ISelectValue>;\n  isLoading: boolean;\n  isReadOnly: boolean;\n  resetEndpoints: TResetEndpoints;\n}\n\nconst Endpoints: React.FC<IEndpoints> = ({\n  endpointItems,\n  deleteEndpoint,\n  filterEndpoints,\n  currentEndpointName,\n  currentEndpointId,\n  institutionsOptions,\n  getLogData,\n  resetEndpoints,\n  isReadOnly,\n  isLoading,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetEndpoints();\n    },\n    [resetEndpoints]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Show log',\n        icon: iconNamesConst.SHORT_TEXT,\n        action: () => getLogData({\n          name: systemMonitorTablesConst.ENDPOINTS,\n          id: currentEndpointId,\n          title: currentEndpointName,\n        }),\n      },\n      {\n        name: 'Delete',\n        icon: iconNamesConst.DELETE,\n        isDisabled: isReadOnly,\n        action: () => deleteEndpoint(currentEndpointId),\n        withConfirmation: true,\n        confirmationText: `Delete endpoint \"${currentEndpointName}\"?`,\n      },\n    ],\n    [deleteEndpoint, currentEndpointName, getLogData, currentEndpointId, isReadOnly]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return { institutionId: institutionsOptions[0] };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Endpoints\"\n      data={endpointItems}\n      columns={tableColumns}\n      newModalName={modalNamesConst.ADD_ENDPOINT}\n      viewingModalName={modalNamesConst.EDIT_ENDPOINT}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterEndpoints}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <EndpointsFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default Endpoints;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Endpoints from './Endpoints';\n\nimport {\n  activeItemIdSelector,\n  currentEndpointNameSelector,\n  endpointsSelector,\n  handleDeleteEndpoint,\n  handleFilterEndpoints,\n  handleGetLogData,\n  isDeletingEndpointSelector,\n  isFilteringEndpointsSelector,\n  isReadOnlySelector,\n  isSysMonitorLoadingLogDataSelector,\n  IStoreState,\n  resetEndpoints,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  currentEndpointId: activeItemIdSelector(state),\n  currentEndpointName: currentEndpointNameSelector(state),\n  endpointItems: endpointsSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  isLoading: isSysMonitorLoadingLogDataSelector(state)\n    || isFilteringEndpointsSelector(state)\n    || isDeletingEndpointSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    deleteEndpoint: handleDeleteEndpoint,\n    filterEndpoints: handleFilterEndpoints,\n    getLogData: handleGetLogData,\n    resetEndpoints,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Endpoints);\n","import { renderCheckBoxTableCell, TableCell, TableHeader } from 'components';\nimport { IInstitution } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IInstitution> = ITableCell<IInstitution[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"ID\" />,\n    accessor: 'id',\n    Cell: (props: TCell<'id'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 320,\n    Header: <TableHeader title=\"Name\" />,\n    accessor: 'institutionName',\n    Cell: (props: TCell<'institutionName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 80,\n    Header: <TableHeader title=\"Status\" />,\n    accessor: 'status',\n    Cell: (props: TCell<'status'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 320,\n    Header: <TableHeader title=\"SFTP Location\" />,\n    accessor: 'sftpLocation',\n    Cell: (props: TCell<'sftpLocation'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 320,\n    Header: <TableHeader title=\"SFTP Public Key\" />,\n    accessor: 'sftpPublicKey',\n    Cell: (props: TCell<'sftpPublicKey'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Current Operation Date\" />,\n    accessor: 'currentOperationDate',\n    Cell: (props: TCell<'currentOperationDate'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Next Operation Date\" />,\n    accessor: 'nextOperationDate',\n    Cell: (props: TCell<'nextOperationDate'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 110,\n    Header: <TableHeader title=\"Master Institution\" />,\n    accessor: 'masterInstitutionFlag',\n    Cell: renderCheckBoxTableCell(),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { iconNamesConst, modalNamesConst, yesNoConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\n\nimport {\n  IInstitution,\n  THandleDeleteInstitution,\n  THandleGetInstitutions,\n  TResetInstitutions,\n} from 'store';\nimport { storageUtil } from 'utils';\n\ninterface IInstitutions {\n  currentInstitutionId: number;\n  currentInstitutionName: string;\n  deleteInstitution: THandleDeleteInstitution;\n  getInstitutions: THandleGetInstitutions;\n  institutionsData: ImmutableArray<IInstitution>;\n  isLoading: boolean;\n  isReadOnly: boolean;\n  resetInstitutions: TResetInstitutions;\n}\n\nconst Institutions: React.FC<IInstitutions> = ({\n  currentInstitutionId,\n  currentInstitutionName,\n  deleteInstitution,\n  getInstitutions,\n  institutionsData,\n  isLoading,\n  isReadOnly,\n  resetInstitutions,\n}) => {\n  React.useEffect(\n    () => {\n      getInstitutions();\n      return () => resetInstitutions();\n    },\n    [getInstitutions, resetInstitutions]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Delete',\n        icon: iconNamesConst.DELETE,\n        isDisabled: isReadOnly,\n        action: () => deleteInstitution(currentInstitutionId),\n        withConfirmation: true,\n        confirmationText: `Delete institution \"${currentInstitutionName}\"?`,\n      },\n    ],\n    [deleteInstitution, currentInstitutionName, currentInstitutionId, isReadOnly]\n  );\n\n  const isMasterInstitution = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      return userData && userData.changeProfileAllowedFlag === yesNoConst.YES;\n    },\n    []\n  );\n\n  return (\n    <PageTemplate\n      title=\"Institutions\"\n      data={institutionsData}\n      columns={tableColumns}\n      isDownloadButton={true}\n      newModalName={isMasterInstitution && modalNamesConst.ADD_INSTITUTION}\n      viewingModalName={modalNamesConst.EDIT_INSTITUTION}\n      contextMenuItems={contextMenuItems}\n      isLoading={isLoading}\n    />\n  );\n};\n\nexport default Institutions;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Accounts from './Institutions';\n\nimport {\n  activeItemIdSelector,\n  currentInstitutionNameSelector,\n  handleDeleteInstitution,\n  handleGetInstitutions,\n  institutionsSelector,\n  isDeletingInstitutionSelector,\n  isGettingInstitutionsSelector,\n  isReadOnlySelector,\n  IStoreState,\n  resetInstitutions,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isGettingInstitutionsSelector(state)\n    || isDeletingInstitutionSelector(state),\n  institutionsData: institutionsSelector(state),\n  currentInstitutionName: currentInstitutionNameSelector(state),\n  currentInstitutionId: activeItemIdSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getInstitutions: handleGetInstitutions,\n    deleteInstitution: handleDeleteInstitution,\n    resetInstitutions,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Accounts);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { InterfacesFilter } from './forms';\n\nimport { iconNamesConst, modalNamesConst, systemMonitorTablesConst } from 'consts';\n\nimport {\n  HandleGetLogData,\n  IInterface,\n  THandleDeleteInterface,\n  THandleFilterInterfaces,\n  TResetInterfaces,\n} from 'store';\n\nimport { ISelectValue } from 'types';\n\ninterface IInterfaces {\n  interfaceItems: ImmutableArray<IInterface>;\n  institutionsOptions: Array<ISelectValue>;\n  currentInterfaceName: string;\n  currentInterfaceId: number;\n  isLoading: boolean;\n  isReadOnly: boolean;\n  deleteInterface: THandleDeleteInterface;\n  filterInterfaces: THandleFilterInterfaces;\n  getLogData: HandleGetLogData;\n  resetInterfaces: TResetInterfaces;\n}\n\nconst Interfaces: React.FC<IInterfaces> = ({\n  interfaceItems,\n  deleteInterface,\n  filterInterfaces,\n  institutionsOptions,\n  resetInterfaces,\n  currentInterfaceName,\n  getLogData,\n  currentInterfaceId,\n  isLoading,\n  isReadOnly,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetInterfaces();\n    },\n    [resetInterfaces]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Show log',\n        icon: iconNamesConst.SHORT_TEXT,\n        action: () => getLogData({\n          name: systemMonitorTablesConst.INTERFACES,\n          id: currentInterfaceId,\n          title: currentInterfaceName,\n        }),\n      },\n      {\n        name: 'Delete',\n        icon: iconNamesConst.DELETE,\n        isDisabled: isReadOnly,\n        action: () => deleteInterface(currentInterfaceId),\n        withConfirmation: true,\n        confirmationText: `Delete interface: ${currentInterfaceName}?`,\n      },\n    ],\n    [deleteInterface, currentInterfaceName, currentInterfaceId, getLogData, isReadOnly]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n      };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Interfaces\"\n      data={interfaceItems}\n      columns={tableColumns}\n      newModalName={modalNamesConst.ADD_INTERFACE}\n      viewingModalName={modalNamesConst.EDIT_INTERFACE}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterInterfaces}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <InterfacesFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default Interfaces;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Interfaces from './Interfaces';\n\nimport {\n  activeItemIdSelector,\n  currentInterfaceNameSelector,\n  handleDeleteInterface,\n  handleFilterInterfaces,\n  handleGetLogData,\n  interfacesSelector,\n  isDeletingInterfaceSelector,\n  isFilteringInterfacesSelector,\n  isReadOnlySelector,\n  isSysMonitorLoadingLogDataSelector,\n  IStoreState,\n  resetInterfaces,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isSysMonitorLoadingLogDataSelector(state)\n    || isFilteringInterfacesSelector(state)\n    || isDeletingInterfaceSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  interfaceItems: interfacesSelector(state),\n  currentInterfaceName: currentInterfaceNameSelector(state),\n  currentInterfaceId: activeItemIdSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    deleteInterface: handleDeleteInterface,\n    filterInterfaces: handleFilterInterfaces,\n    getLogData: handleGetLogData,\n    resetInterfaces,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Interfaces);\n","import { TableCell, TableHeader } from 'components';\nimport { ISchedulerJob } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof ISchedulerJob> = ITableCell<ISchedulerJob[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institutionId',\n    Cell: (props: TCell<'institutionId'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Name\" />,\n    accessor: 'name',\n    Cell: (props: TCell<'name'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Description\" />,\n    accessor: 'description',\n    Cell: (props: TCell<'description'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 80,\n    Header: <TableHeader title=\"Status\" />,\n    accessor: 'status',\n    Cell: (props: TCell<'status'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Last Execution Datetime\" />,\n    accessor: 'lastExecutionDatetime',\n    Cell: (props: TCell<'lastExecutionDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Last Execution Result\" />,\n    accessor: 'lastExecutionResult',\n    Cell: (props: TCell<'lastExecutionResult'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Cron Expression\" />,\n    accessor: 'cronExpression',\n    Cell: (props: TCell<'cronExpression'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Executable Type\" />,\n    accessor: 'executableType',\n    Cell: (props: TCell<'executableType'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Executable\" />,\n    accessor: 'executable',\n    Cell: (props: TCell<'executable'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Log Location\" />,\n    accessor: 'logLocation',\n    Cell: (props: TCell<'logLocation'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { Button } from 'components';\nimport { IWithModal, withModal } from 'HOCs';\n\nimport {\n  iconNamesConst,\n  modalNamesConst,\n  systemMonitorTablesConst,\n} from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { schedulerTasksConsts } from './consts';\n\nimport {\n  HandleGetLogData,\n  ISchedulerJob,\n  THandleDeleteSchedulerJob,\n  THandleExecSchedulerJob,\n  THandleFilterScheduledJobsById,\n  THandleFilterSchedulerJobs,\n  TResetScheduler,\n} from 'store';\n\nimport { SchedulerFilter } from './forms';\n\nimport { ISelectValue } from 'types';\n\ninterface IScheduler extends IWithModal {\n  currentSchedulerId: number;\n  currentSchedulerName: string;\n  deleteSchedulerJob: THandleDeleteSchedulerJob;\n  execSchedulerJob: THandleExecSchedulerJob;\n  filterScheduledJobsById: THandleFilterScheduledJobsById;\n  filterSchedulerJobs: THandleFilterSchedulerJobs;\n  getLogData: HandleGetLogData;\n  institutionsOptions: Array<ISelectValue>;\n  isLoading: boolean;\n  isReadOnly: boolean;\n  resetScheduler: TResetScheduler;\n  schedulerJobs: ImmutableArray<ISchedulerJob>;\n}\n\nexport const Scheduler: React.FC<IScheduler> = ({\n  filterSchedulerJobs,\n  schedulerJobs,\n  execSchedulerJob,\n  currentSchedulerId,\n  deleteSchedulerJob,\n  currentSchedulerName,\n  resetScheduler,\n  getLogData,\n  filterScheduledJobsById,\n  institutionsOptions,\n  isLoading,\n  isReadOnly,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetScheduler();\n    },\n    [resetScheduler]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Show log',\n        icon: iconNamesConst.SHORT_TEXT,\n        action: () => getLogData({\n          name: systemMonitorTablesConst.SCHEDULER_JOBS,\n          id: currentSchedulerId,\n          title: currentSchedulerName,\n        }),\n      },\n      { isDivider: true },\n      {\n        name: 'Scheduled Jobs',\n        action: () => filterScheduledJobsById({ scheduler_id: currentSchedulerId }),\n      },\n      { isDivider: true },\n      {\n        name: schedulerTasksConsts.EXECUTE_TASK.NAME,\n        isDisabled: isReadOnly,\n        action: () => execSchedulerJob({\n          taskId: currentSchedulerId,\n          taskCommand: schedulerTasksConsts.EXECUTE_TASK.TASK_COMMAND,\n        }),\n        withConfirmation: true,\n        confirmationText: `${schedulerTasksConsts.EXECUTE_TASK.NAME} \"${currentSchedulerName}\"?`,\n      },\n      {\n        name: `${schedulerTasksConsts.EXECUTE_TASK.NAME} with auto-refresh`,\n        isDisabled: isReadOnly,\n        action: () => execSchedulerJob(\n          {\n            taskId: currentSchedulerId,\n            taskCommand: schedulerTasksConsts.EXECUTE_TASK.TASK_COMMAND,\n          },\n          {\n            withAutoRefresh: true,\n          }),\n        withConfirmation: true,\n        confirmationText:\n          `${schedulerTasksConsts.EXECUTE_TASK.NAME} \"${currentSchedulerName}\" with auto-refresh?`,\n      },\n      {\n        name: schedulerTasksConsts.STOP.NAME,\n        isDisabled: isReadOnly,\n        action: () => execSchedulerJob({\n          taskId: currentSchedulerId,\n          taskCommand: schedulerTasksConsts.STOP.TASK_COMMAND,\n        }),\n        withConfirmation: true,\n        confirmationText: `${schedulerTasksConsts.STOP.NAME} \"${currentSchedulerName}\"?`,\n      },\n      {\n        name: schedulerTasksConsts.START.NAME,\n        isDisabled: isReadOnly,\n        action: () => execSchedulerJob({\n          taskId: currentSchedulerId,\n          taskCommand: schedulerTasksConsts.START.TASK_COMMAND,\n        }),\n        withConfirmation: true,\n        confirmationText: `${schedulerTasksConsts.START.NAME} \"${currentSchedulerName}\"?`,\n      },\n      {\n        name: schedulerTasksConsts.PAUSE.NAME,\n        isDisabled: isReadOnly,\n        action: () => execSchedulerJob({\n          taskId: currentSchedulerId,\n          taskCommand: schedulerTasksConsts.PAUSE.TASK_COMMAND,\n        }),\n        withConfirmation: true,\n        confirmationText: `${schedulerTasksConsts.PAUSE.NAME} \"${currentSchedulerName}\"?`,\n      },\n      {\n        name: schedulerTasksConsts.RESUME.NAME,\n        isDisabled: isReadOnly,\n        action: () => execSchedulerJob({\n          taskId: currentSchedulerId,\n          taskCommand: schedulerTasksConsts.RESUME.TASK_COMMAND,\n        }),\n        withConfirmation: true,\n        confirmationText: `${schedulerTasksConsts.RESUME.NAME} \"${currentSchedulerName}\"?`,\n      },\n      { isDivider: true },\n      {\n        name: 'Delete',\n        icon: iconNamesConst.DELETE,\n        isDisabled: isReadOnly,\n        action: () => deleteSchedulerJob(currentSchedulerId),\n        withConfirmation: true,\n        confirmationText: `Delete scheduler \"${currentSchedulerName}\"?`,\n      },\n    ],\n    [\n      execSchedulerJob,\n      currentSchedulerName,\n      currentSchedulerId,\n      deleteSchedulerJob,\n      filterScheduledJobsById,\n      getLogData,\n      isReadOnly,\n    ]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return { institutionId: institutionsOptions[0] };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Scheduler\"\n      data={schedulerJobs}\n      columns={tableColumns}\n      newModalName={modalNamesConst.ADD_SCHEDULER}\n      viewingModalName={modalNamesConst.EDIT_SCHEDULER}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterSchedulerJobs}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <SchedulerFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n      AdditionalButton={\n        <Button\n          text=\"Show scheduler master log\"\n          iconName={iconNamesConst.SHORT_TEXT}\n          onClick={() => getLogData({ name: systemMonitorTablesConst.SCHEDULER_JOBS })}\n          disabled={isLoading}\n        />\n      }\n    />\n  );\n};\n\nexport default withModal(Scheduler);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Scheduler from './Scheduler';\n\nimport {\n  activeItemIdSelector,\n  currentSchedulerNameSelector,\n  handleDeleteSchedulerJob,\n  handleExecSchedulerJob,\n  handleFilterByIdScheduledJobs,\n  handleFilterSchedulerJobs,\n  handleGetLogData,\n  isReadOnlySelector,\n  isSchedulerJobDeletingSelector,\n  isSchedulerJobsFilteringSelector,\n  isSchedulerJobUpdatingSelector,\n  isSysMonitorLoadingLogDataSelector,\n  IStoreState,\n  resetScheduler,\n  schedulerJobsSelector,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  currentSchedulerId: activeItemIdSelector(state),\n  currentSchedulerName: currentSchedulerNameSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  isLoading: isSysMonitorLoadingLogDataSelector(state)\n    || isSchedulerJobsFilteringSelector(state)\n    || isSchedulerJobUpdatingSelector(state)\n    || isSchedulerJobDeletingSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n  schedulerJobs: schedulerJobsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    deleteSchedulerJob: handleDeleteSchedulerJob,\n    execSchedulerJob: handleExecSchedulerJob,\n    filterScheduledJobsById: handleFilterByIdScheduledJobs,\n    filterSchedulerJobs: handleFilterSchedulerJobs,\n    getLogData: handleGetLogData,\n    resetScheduler,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Scheduler);\n","import { renderCheckBoxTableCell, TableCell, TableHeader } from 'components';\nimport { ISysProp } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof ISysProp> = ITableCell<ISysProp[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 410,\n    Header: <TableHeader title=\"Property Name\" />,\n    accessor: 'id',\n    Cell: (props: TCell<'id'>) => (\n      <TableCell value={props.value} />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Current Value\" />,\n    accessor: 'currentValue',\n    Cell: (props: TCell<'currentValue'>) => (\n      <TableCell value={props.value} />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Previous Value\" />,\n    accessor: 'previousValue',\n    Cell: (props: TCell<'previousValue'>) => (\n      <TableCell value={props.value} />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Last Datetime\" />,\n    accessor: 'lastDatetime',\n    Cell: (props: TCell<'lastDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 65,\n    Header: <TableHeader title=\"Locked\" />,\n    accessor: 'lockedFlag',\n    Cell: renderCheckBoxTableCell(),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { SystemPropertyFilter } from './forms';\n\nimport { iconNamesConst, modalNamesConst } from 'consts';\n\nimport {\n  ISysProp,\n  THandleDeleteSysProp,\n  THandleFilterSysProps,\n  THandleUpdateSysProps,\n  TResetSystemProperties,\n} from 'store';\n\ninterface ISystemProperties {\n  deleteSysProp: THandleDeleteSysProp;\n  filterSysProps: THandleFilterSysProps;\n  updateSysProps: THandleUpdateSysProps;\n  sysPropsItems: ImmutableArray<ISysProp>;\n  currentSysPropId: number | string;\n  resetSystemProperties: TResetSystemProperties;\n  isLoading: boolean;\n  isReadOnly: boolean;\n}\n\nexport const SystemProperties: React.FC<ISystemProperties> = ({\n  sysPropsItems,\n  deleteSysProp,\n  filterSysProps,\n  updateSysProps,\n  currentSysPropId,\n  resetSystemProperties,\n  isLoading,\n  isReadOnly,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetSystemProperties();\n    },\n    [resetSystemProperties]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Delete',\n        icon: iconNamesConst.DELETE,\n        isDisabled: isReadOnly,\n        action: () => deleteSysProp(currentSysPropId),\n        withConfirmation: true,\n        confirmationText: `Delete system property \"${currentSysPropId}\"?`,\n      },\n      {\n        name: 'Lock',\n        icon: iconNamesConst.LOCK,\n        isDisabled: isReadOnly,\n        action: () => updateSysProps({ lockedFlag: true }),\n        withConfirmation: true,\n        confirmationText: `Lock system property \"${currentSysPropId}\"?`,\n      },\n    ],\n    [deleteSysProp, currentSysPropId, updateSysProps, isReadOnly]\n  );\n\n  return (\n    <PageTemplate\n      title=\"System Properties\"\n      data={sysPropsItems}\n      columns={tableColumns}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      newModalName={modalNamesConst.ADD_SYSTEM_PROPERTY}\n      viewingModalName={modalNamesConst.EDIT_SYSTEM_PROPERTY}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterSysProps}\n      FilterForm={\n        <SystemPropertyFilter\n          isDisabled={isLoading}\n        />\n      }\n    />\n  );\n};\n\nexport default SystemProperties;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport SystemProperties from './SystemProperties';\n\nimport {\n  activeItemIdSelector,\n  handleDeleteSysProp,\n  handleFilterSysProps,\n  handleUpdateSysProps,\n  isReadOnlySelector,\n  isSysPropDeletingSelector,\n  isSysPropsFilteringSelector,\n  isSysPropUpdatingSelector,\n  IStoreState,\n  resetSystemProperties,\n  sysPropsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isSysPropUpdatingSelector(state)\n    || isSysPropDeletingSelector(state)\n    || isSysPropsFilteringSelector(state),\n  sysPropsItems: sysPropsSelector(state),\n  currentSysPropId: activeItemIdSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    deleteSysProp: handleDeleteSysProp,\n    updateSysProps: handleUpdateSysProps,\n    filterSysProps: handleFilterSysProps,\n    resetSystemProperties,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SystemProperties);\n","import { renderCheckBoxTableCell, TableCell, TableHeader } from 'components';\nimport { IUser } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IUser> = ITableCell<IUser[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Username\" />,\n    accessor: 'username',\n    Cell: (props: TCell<'username'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 250,\n    Header: <TableHeader title=\"First Name\" />,\n    accessor: 'firstName',\n    Cell: (props: TCell<'firstName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 250,\n    Header: <TableHeader title=\"Last Name\" />,\n    accessor: 'lastName',\n    Cell: (props: TCell<'lastName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institution',\n    Cell: (props: TCell<'institution'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Email\" />,\n    accessor: 'email',\n    Cell: (props: TCell<'email'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 120,\n    Header: <TableHeader title=\"Status\" />,\n    accessor: 'status',\n    Cell: (props: TCell<'status'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 80,\n    Header: <TableHeader title=\"2FA Required\" />,\n    accessor: 'requires2faFlag',\n    Cell: renderCheckBoxTableCell(),\n  },\n  {\n    maxWidth: 90,\n    Header: <TableHeader title=\"Change Profile Allowed\" />,\n    accessor: 'changeProfileAllowedFlag',\n    Cell: renderCheckBoxTableCell(),\n  },\n  {\n    maxWidth: 90,\n    Header: <TableHeader title=\"Password Entry Counter\" />,\n    accessor: 'passwordEntryCounter',\n    Cell: (props: TCell<'passwordEntryCounter'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Datetime of Last Login\" />,\n    accessor: 'datetimeOfLastLogin',\n    Cell: (props: TCell<'datetimeOfLastLogin'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { modalNamesConst } from 'consts';\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { UsersFilter } from './forms';\n\nimport {\n  IUser,\n  THandleFilterUserById,\n  THandleFilterUsers,\n  TResetUsers\n} from 'store';\n\nimport { ISelectValue } from 'types';\n\ninterface IUsers {\n  currentUserId: number;\n  filterUsers: THandleFilterUsers;\n  filterUsersById: THandleFilterUserById;\n  institutionsOptions: Array<ISelectValue>;\n  isLoading: boolean;\n  resetUsers: TResetUsers;\n  users: ImmutableArray<IUser>;\n}\n\nexport const Users: React.FC<IUsers> = ({\n  currentUserId,\n  filterUsers,\n  filterUsersById,\n  institutionsOptions,\n  isLoading,\n  resetUsers,\n  users,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetUsers();\n    },\n    [resetUsers]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      { isDivider: true },\n      {\n        name: 'Activity',\n        action: () => filterUsersById({ user_id: currentUserId }),\n      },\n    ],\n    [filterUsersById, currentUserId]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        statusActiveFlag: false,\n        institutionId: institutionsOptions[0],\n      };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Users\"\n      data={users}\n      columns={tableColumns}\n      contextMenuItems={contextMenuItems}\n      newModalName={modalNamesConst.ADD_USER}\n      viewingModalName={modalNamesConst.EDIT_USER}\n      filterAction={filterUsers}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <UsersFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default Users;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Users from './Users';\n\nimport {\n  activeItemIdSelector,\n  handleFilterByIdUsersActivity,\n  handleFilterUsers,\n  isAddingUserSelector,\n  isFilteringUsersSelector,\n  IStoreState,\n  isUpdatingUserSelector,\n  resetUsers,\n  userInstitutionsOptionsSelector,\n  usersSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  currentUserId: activeItemIdSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  users: usersSelector(state),\n  isLoading: isAddingUserSelector(state)\n    || isUpdatingUserSelector(state)\n    || isFilteringUsersSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterUsers: handleFilterUsers,\n    filterUsersById: handleFilterByIdUsersActivity,\n    resetUsers,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Users);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { modalNamesConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\n\nimport { IUsersGroup, THandleGetUsersGroups, TResetUsersGroups } from 'store';\n\ninterface IUsersGroups {\n  getUsersGroups: THandleGetUsersGroups;\n  isLoading: boolean;\n  resetUsersGroups: TResetUsersGroups;\n  usersGroups: ImmutableArray<IUsersGroup>;\n}\n\nexport const UsersGroups: React.FC<IUsersGroups> = ({\n  getUsersGroups,\n  isLoading,\n  resetUsersGroups,\n  usersGroups,\n}) => {\n  React.useEffect(\n    () => {\n      getUsersGroups();\n      return () => resetUsersGroups();\n    },\n    [getUsersGroups, resetUsersGroups]\n  );\n\n  return (\n    <PageTemplate\n      title=\"User Groups\"\n      data={usersGroups}\n      columns={tableColumns}\n      isDownloadButton={true}\n      newModalName={modalNamesConst.ADD_USERS_GROUP}\n      viewingModalName={modalNamesConst.EDIT_USERS_GROUP}\n      isLoading={isLoading}\n    />\n  );\n};\n\nexport default UsersGroups;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport UsersGroups from './UsersGroups';\n\nimport {\n  handleGetUsersGroups,\n  isAddingUsersGroupSelector,\n  isLoadingUsersGroupsSelector,\n  IStoreState,\n  isUpdatingUsersGroupSelector,\n  resetUsersGroups,\n  usersGroupsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isAddingUsersGroupSelector(state)\n    || isUpdatingUsersGroupSelector(state)\n    || isLoadingUsersGroupsSelector(state),\n  usersGroups: usersGroupsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getUsersGroups: handleGetUsersGroups,\n    resetUsersGroups,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UsersGroups);\n","import { TableCell, TableHeader } from 'components';\nimport { IDictionaryCountryPrepared } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IDictionaryCountryPrepared> = ITableCell<IDictionaryCountryPrepared[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Numeric Code\" />,\n    accessor: 'numericCode',\n    Cell: (props: TCell<'numericCode'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Country Code\" />,\n    accessor: 'countryCode',\n    Cell: (props: TCell<'countryCode'>) => (\n      <TableCell\n        value={props.value}\n        onCenter={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Alpha-2 Code\" />,\n    accessor: 'alpha2Code',\n    Cell: (props: TCell<'alpha2Code'>) => (\n      <TableCell\n        value={props.value}\n        onCenter={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Name\" />,\n    accessor: 'name',\n    Cell: (props: TCell<'name'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { tableColumns } from './tableColumns';\n\nimport PageTemplate from 'containers/PageTemplate';\n\nimport { IDictionaryCountryPrepared, THandleGetDictionaryCountries } from 'store';\n\ninterface ICountries {\n  countriesData: ImmutableArray<IDictionaryCountryPrepared>;\n  getCountriesData: THandleGetDictionaryCountries;\n  isLoading: boolean;\n}\n\nexport const Countries: React.FC<ICountries> = ({\n  countriesData,\n  getCountriesData,\n  isLoading,\n}) => {\n  React.useEffect(\n    () => {\n      getCountriesData();\n    },\n    [getCountriesData]\n  );\n\n  return (\n    <PageTemplate\n      columns={tableColumns}\n      data={countriesData}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      isSearchable={true}\n      title=\"Countries\"\n    />\n  );\n};\n\nexport default Countries;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Countries from './Countries';\n\nimport {\n  dictionaryCountriesSelector,\n  handleGetDictionaryCountries,\n  isCountriesLoadingSelector,\n  IStoreState,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  countriesData: dictionaryCountriesSelector(state),\n  isLoading: isCountriesLoadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getCountriesData: handleGetDictionaryCountries,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Countries);\n","import { TableCell, TableHeader } from 'components';\nimport { IDictionaryCurrencyPrepared } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IDictionaryCurrencyPrepared> =\n  ITableCell<IDictionaryCurrencyPrepared[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Numeric Code\" />,\n    accessor: 'numericCode',\n    Cell: (props: TCell<'numericCode'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Currency Code\" />,\n    accessor: 'currencyCode',\n    Cell: (props: TCell<'currencyCode'>) => (\n      <TableCell\n        value={props.value}\n        onCenter={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 400,\n    Header: <TableHeader title=\"Name\" />,\n    accessor: 'name',\n    Cell: (props: TCell<'name'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { tableColumns } from './tableColumns';\n\nimport PageTemplate from 'containers/PageTemplate';\n\nimport { IDictionaryCurrencyPrepared, THandleGetDictionaryCurrencies } from 'store';\n\ninterface ICurrencies {\n  currenciesData: ImmutableArray<IDictionaryCurrencyPrepared>;\n  getCurrenciesData: THandleGetDictionaryCurrencies;\n  isLoading: boolean;\n}\n\nexport const Currencies: React.FC<ICurrencies> = ({\n  currenciesData,\n  getCurrenciesData,\n  isLoading,\n}) => {\n  React.useEffect(\n    () => {\n      getCurrenciesData();\n    },\n    [getCurrenciesData]\n  );\n\n  return (\n    <PageTemplate\n      columns={tableColumns}\n      data={currenciesData}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      isSearchable={true}\n      title=\"Currencies\"\n    />\n  );\n};\n\nexport default Currencies;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Currencies from './Currencies';\n\nimport {\n  dictionaryCurrenciesSelector,\n  handleGetDictionaryCurrencies,\n  isCurrenciesLoadingSelector,\n  IStoreState,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  currenciesData: dictionaryCurrenciesSelector(state),\n  isLoading: isCurrenciesLoadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getCurrenciesData: handleGetDictionaryCurrencies,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Currencies);\n","import React from 'react';\nimport { Field } from 'redux-form';\n\nimport { Box } from '@rebass/grid';\n\nimport { SelectField } from 'components';\n\nimport { ISelectValue } from 'types';\nimport { formErrorUtil } from 'utils';\n\ninterface IEventsDataElemsFilter {\n  eventOptions: Array<ISelectValue>;\n  isDisabled: boolean;\n}\n\nconst EventsDataElemsFilter: React.FC<IEventsDataElemsFilter> = ({\n  eventOptions,\n  isDisabled,\n}) => {\n  return (\n    <Box width={[1 / 4]} p=\"8px\">\n      <Field\n        id=\"eventId\"\n        name=\"eventId\"\n        component={SelectField}\n        label=\"Event\"\n        placeholder=\"Select Event\"\n        options={eventOptions}\n        isDisabled={isDisabled}\n        isRequired={true}\n        validate={[formErrorUtil.isRequired]}\n      />\n    </Box>\n  );\n};\n\nexport default EventsDataElemsFilter;\n","import { TableCell, TableHeader } from 'components';\n\nimport { IDictionaryEventDataElemPrepared } from 'store';\n\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IDictionaryEventDataElemPrepared> =\n  ITableCell<IDictionaryEventDataElemPrepared[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"ID\" />,\n    accessor: 'eventId',\n    Cell: (props: TCell<'eventId'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Name\" />,\n    accessor: 'name',\n    Cell: (props: TCell<'name'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Description\" />,\n    accessor: 'description',\n    Cell: (props: TCell<'description'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Event\" />,\n    accessor: 'event',\n    Cell: (props: TCell<'event'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Data Type\" />,\n    accessor: 'dataType',\n    Cell: (props: TCell<'dataType'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport EventDataElemsFilter from './EventDataElemsFilter';\nimport { tableColumns } from './tableColumns';\n\nimport PageTemplate from 'containers/PageTemplate';\n\nimport {\n  IDictionaryEventDataElemPrepared,\n  THandleFilterDictionaryEventDataElems,\n  THandleGetDictionaryEvents,\n  TResetEventDataElems,\n} from 'store';\n\nimport { ISelectValue } from 'types';\n\ninterface IEventDataElems {\n  eventDataElemsData: ImmutableArray<IDictionaryEventDataElemPrepared>;\n  eventsOptions: Array<ISelectValue>;\n  filterEventDataElems: THandleFilterDictionaryEventDataElems;\n  getEventsData: THandleGetDictionaryEvents;\n  isLoading: boolean;\n  resetEventDataElems: TResetEventDataElems;\n}\n\nexport const EventDataElems: React.FC<IEventDataElems> = ({\n  eventDataElemsData,\n  eventsOptions,\n  filterEventDataElems,\n  getEventsData,\n  isLoading,\n  resetEventDataElems,\n}) => {\n  React.useEffect(\n    () => {\n      getEventsData();\n      return () => resetEventDataElems();\n    },\n    [getEventsData, resetEventDataElems]\n  );\n\n  return (\n    <PageTemplate\n      columns={tableColumns}\n      data={eventDataElemsData}\n      filterAction={filterEventDataElems}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      isSearchable={true}\n      title=\"Event Data Elements\"\n      FilterForm={\n        <EventDataElemsFilter\n          isDisabled={isLoading}\n          eventOptions={eventsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default EventDataElems;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport EventDataElems from './EventDataElems';\n\nimport {\n  dictionaryEventDataElemsSelector,\n  dictionaryEventsOptionsSelector,\n  handleFilterDictionaryEventDataElems,\n  handleGetDictionaryEvents,\n  isEventDataElemsLoadingSelector,\n  IStoreState,\n  resetEventDataElems,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  eventDataElemsData: dictionaryEventDataElemsSelector(state),\n  eventsOptions: [\n    { label: 'Select all', value: '' },\n    ...dictionaryEventsOptionsSelector(state),\n  ],\n  isLoading: isEventDataElemsLoadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getEventsData: handleGetDictionaryEvents,\n    filterEventDataElems: handleFilterDictionaryEventDataElems,\n    resetEventDataElems,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EventDataElems);\n","import { TableCell, TableHeader } from 'components';\nimport { IDictionaryEvent } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IDictionaryEvent> = ITableCell<IDictionaryEvent[T]>;\n\nexport const tableColumns = [\n    {\n      maxWidth: 100,\n      Header: <TableHeader title=\"ID\" />,\n      accessor: 'id',\n      Cell: (props: TCell<'id'>) => (\n        <TableCell\n          value={props.value}\n          isNumber={true}\n        />\n      ),\n    },\n    {\n      maxWidth: 300,\n      Header: <TableHeader title=\"Name\" />,\n      accessor: 'name',\n      Cell: (props: TCell<'name'>) => (\n        <TableCell\n          value={props.value}\n        />\n      ),\n    },\n    {\n      maxWidth: 200,\n      Header: <TableHeader title=\"Product Type\" />,\n      accessor: 'productTypeName',\n      Cell: (props: TCell<'productTypeName'>) => (\n        <TableCell\n          value={props.value}\n        />\n      ),\n    },\n  ];\n","import React from 'react';\n\nimport { tableColumns } from './tableColumns';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { IDictionaryEvent, THandleGetDictionaryEvents } from 'store';\n\ninterface IEvents {\n  eventsData: Array<IDictionaryEvent>;\n  getEventsData: THandleGetDictionaryEvents;\n  isLoading: boolean;\n}\n\nexport const Events: React.FC<IEvents> = ({\n  eventsData,\n  getEventsData,\n  isLoading,\n}) => {\n  React.useEffect(\n    () => {\n      getEventsData();\n    },\n    [getEventsData]\n  );\n\n  return (\n    <PageTemplate\n      columns={tableColumns}\n      data={eventsData}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      title=\"Events\"\n    />\n  );\n};\n\nexport default Events;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Events from './Events';\n\nimport {\n  dictionaryEventsSelector,\n  handleGetDictionaryEvents,\n  isEventsLoadingSelector,\n  IStoreState,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  eventsData: dictionaryEventsSelector(state),\n  isLoading: isEventsLoadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getEventsData: handleGetDictionaryEvents,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Events);\n","import { TableCell, TableHeader } from 'components';\n\nimport { IDictionaryTransactionTypePrepared } from 'store';\n\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IDictionaryTransactionTypePrepared> =\n  ITableCell<IDictionaryTransactionTypePrepared[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"ID\" />,\n    accessor: 'id',\n    Cell: (props: TCell<'id'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Debit Credit Indicator\" />,\n    accessor: 'debitCreditIndicator',\n    Cell: (props: TCell<'debitCreditIndicator'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 400,\n    Header: <TableHeader title=\"Description\" />,\n    accessor: 'description',\n    Cell: (props: TCell<'description'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { tableColumns } from './tableColumns';\n\nimport PageTemplate from 'containers/PageTemplate';\n\nimport { IDictionaryTransactionTypePrepared, THandleGetDictionaryTransactionTypes } from 'store';\n\ninterface ITransactionTypes {\n  getTransactionTypesData: THandleGetDictionaryTransactionTypes;\n  isLoading: boolean;\n  transactionTypesData: ImmutableArray<IDictionaryTransactionTypePrepared>;\n}\n\nexport const TransactionTypes: React.FC<ITransactionTypes> = ({\n  getTransactionTypesData,\n  isLoading,\n  transactionTypesData,\n}) => {\n  React.useEffect(\n    () => {\n      getTransactionTypesData();\n    },\n    [getTransactionTypesData]\n  );\n\n  return (\n    <PageTemplate\n      columns={tableColumns}\n      data={transactionTypesData}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      title=\"Transaction Types\"\n    />\n  );\n};\n\nexport default TransactionTypes;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport TransactionTypes from './TransactionTypes';\n\nimport {\n  dictionaryTransTypesSelector,\n  handleGetDictionaryTransactionTypes,\n  IStoreState,\n  isTransTypesLoadingSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isTransTypesLoadingSelector(state),\n  transactionTypesData: dictionaryTransTypesSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getTransactionTypesData: handleGetDictionaryTransactionTypes,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TransactionTypes);\n"],"sourceRoot":""}