{"version":3,"sources":["containers/PageTemplate/EditableTable.tsx","containers/PageTemplate/withEditTable.tsx","containers/PageTemplate/Filter/Filter.tsx","containers/PageTemplate/Filter/index.ts","containers/PageTemplate/PageTemplate.tsx","containers/PageTemplate/index.ts","containers/Audit/UsersActivity/components/tableColumns.tsx","containers/Audit/UsersActivity/forms/UsersActivityFilter/UsersActivityFilter.tsx","containers/Audit/UsersActivity/forms/UsersActivityFilter/index.ts","containers/Audit/UsersActivity/UsersActivity.tsx","containers/Audit/UsersActivity/index.ts","containers/Audit/ApiCalls/components/tableColumns.tsx","containers/Audit/ApiCalls/ApiCalls.tsx","containers/Audit/ApiCalls/index.ts","containers/Audit/ScheduledJobs/forms/ScheduledJobsFilter/ScheduledJobsFilter.tsx","containers/Audit/ScheduledJobs/forms/ScheduledJobsFilter/index.ts","containers/Audit/ScheduledJobs/components/tableColumns.tsx","containers/Audit/ScheduledJobs/ScheduledJobs.tsx","containers/Audit/ScheduledJobs/index.ts","containers/Audit/SystemMonitor/components/Collapse.tsx","containers/Audit/SystemMonitor/components/SysMonitorBox.tsx","containers/Audit/SystemMonitor/components/RefreshCheckbox.tsx","containers/Audit/SystemMonitor/components/Header.tsx","containers/Audit/SystemMonitor/components/tableColumns.tsx","containers/Audit/SystemMonitor/components/schedulerTableColumns.tsx","containers/Audit/SystemMonitor/components/transactionsTableColumns.tsx","containers/Audit/SystemMonitor/SystemMonitor.tsx","containers/Audit/SystemMonitor/index.ts","containers/Audit/UiSessions/components/tableColumns.tsx","containers/Audit/UiSessions/forms/UiSessionsFilter.tsx","containers/Audit/UiSessions/UiSessions.tsx","containers/Audit/UiSessions/index.ts"],"names":["withEditTable","Component","WithEditTable","props","activeTableRowIndex","contextMenuItems","handleOpenModal","modalsStateList","handleSetActiveItemId","onRowClick","handleSetActiveTableRowIndex","viewingModalName","originProps","React","useState","isOpenedModal","setIsOpenedModal","isVisibleContextMenu","setIsVisibleContextMenu","handleRemoveActiveIds","useCallback","useEffect","isSomeModalOpened","modalsList","find","modal","name","openCurrentRowInModal","onContextMenuClick","e","value","withConfirmation","modalNamesConst","CONFIRMATION","payload","confirmationAction","action","confirmationTitle","confirmationText","menuItems","useMemo","openItem","icon","iconNamesConst","EDIT","handleClickOnRow","_","rowInfo","isLocked","original","lockedFlag","id","rowIndexOriginal","index","rowIndex","page","pageSize","onDoubleClick","onContextMenu","length","className","Fragment","disable","menuId","onClick","items","isHidden","onHide","displayName","componentUtil","getDisplayName","connect","state","activeTableRowIndexSelector","modalsStateListSelector","dispatch","bindActionCreators","openModal","setActiveItemId","setActiveTableRowIndex","withSpinner","pageTemplateProps","getTrGroupProps","activeRowIndex","FilterWrapper","styled","div","theme","colors","lighterGray","lighterGrayCell","color","darkGray","filteredFieldsToStore","data","Object","keys","filter","key","match","reduce","obj","reduxForm","form","formNamesConst","FILTER","destroyOnUnmount","enableReinitialize","FilterForm","filterAction","filterValues","handleSubmit","isAutoRefresh","isLoading","location","setIsAccessibleFiltering","stopAutoRefresh","username","userData","storageUtil","getUserData","valuesCount","values","acc","curr","isAccessibleButton","hasInstitution","hasTransactionId","hasAccountId","hasCustomerId","hasCardId","hasProductName","hasAccountAlias","hasPanAlias","hasLastName","conditions","default","basePath","uiItemsConst","SYSTEM_PROPERTIES","USERS","SCHEDULER","API_CALLS","USERS_ACTIVITY","ACCOUNTS","CARDS","STATEMENTS","CUSTOMERS","TRANSACTIONS","pathname","handleSubmitForm","a","cookiesUtil","set","JSON","stringify","expires","cookiesExpiresConst","MONTH","onSubmit","width","alignItems","flexWrap","m","text","disabled","formValues","getFormValues","isAutoRefreshSelector","Filter","withModal","withRouter","title","columns","newModalName","resetUtils","AdditionalButton","initialFilterValues","setIsOpenFilter","filterData","isOpenFilter","isDownloadButton","isSearchable","uiItems","isReadOnly","setActivePagePermission","isFilterable","setIsFilterable","timer","setInterval","clearInterval","currentUiItem","item","permission","filterButtonText","fileName","split","join","toLowerCase","isData","filterInitialValues","storedFilter","get","parse","isSearchableButton","handleSetIsFilterable","handleSetIsOpenFilter","PageTitle","pageId","mb","iconName","initialValues","fontSize","mr","PLUS","SEARCH","selectable","isDisabled","dropdownListPosition","ToggleButtonComponent","DOWNLOAD","FILE","downloadUtil","downloadCSV","classNames","seconds","ml","size","STOP","mt","EditableTable","filterable","isOpenFilterSelector","isReadOnlySelector","uiItemsSelector","PageTemplate","tableColumns","maxWidth","Header","accessor","Cell","isNumber","isDate","UsersActivityFilter","usersOptions","institutionsOptions","getUsers","currentInstitution","isLoadingUsers","currentInstitutionId","p","Field","component","SelectField","label","placeholder","options","isClearable","isRequired","validate","formErrorUtil","MaskField","dateFormatConst","DATE_TIME","mask","maskFormatConst","isDateTime","formSelector","formValueSelector","isUsersActivityUsersLoadingSelector","usersActivityUsersSelector","handleGetUsersActivityUsers","UsersActivity","usersActivity","filterUsersActivity","resetUsersActivity","dateTimeFrom","setDateTimeFrom","dateTimeTo","setDateTimeTo","dateUtil","yesterdayDateTime","todayDateTime","institutionId","usersActivityDateTimeFrom","usersActivityDateTimeTo","isUsersActivityLoadingSelector","userInstitutionsOptionsSelector","usersActivitySelector","handleFilterUsersActivity","isSmaller","ApiCalls","apiCalls","filterApiCalls","resetApiCalls","apiCallsDateTimeFrom","apiCallsDateTimeTo","API_CALL","isLoadingApiCallsSelector","apiCallsSelector","handleFilterApiCalls","ScheduledJobsFilter","institutionValue","getSchedulerNames","schedulerNameOptions","isLoadingSchedulerNames","isSchedulerJobNamesGettingSelector","instSchedulerNamesOptions","handleGetSchedulerNamesByInstId","ScheduledJobs","scheduledJobs","filterScheduledJobs","resetScheduledJobs","getLogData","currentSchedulerId","currentScheduledJobName","SHORT_TEXT","systemMonitorTablesConst","SCHEDULER_JOBS","scheduledJobsDateTimeFrom","scheduledJobsDateTimeTo","isSysMonitorLoadingLogDataSelector","isScheduledJobsLoadingSelector","scheduledJobsSelector","currentScheduledJobIdSelector","currentScheduledJobNameSelector","handleFilterScheduledJobs","handleGetLogData","CollapseButton","ChevronDownIcon","gray","isOpen","normalAccent","CollapseHeader","Collapse","children","header","additionalTool","setIsOpen","justifyContent","noSpace","SysMonitorBoxWrapper","white","SysMonitorBox","CheckBoxWrapper","Flex","RefreshCheckbox","isChecked","setIsChecked","handleClick","counts","countActive","countFaulty","cellInfo","schedulerTableColumns","transactionsTableColumns","isFixed","getSysMonitorData","resetSysMonitor","interfacesData","endpointsData","schedulerData","lastTransactionsData","isLoadingInterfaces","isLoadingEndpoints","isLoadingScheduler","isLoadingLastTransactions","interfacesCounts","endpointsCounts","schedulerCounts","refreshingTables","setRefreshingTables","isCounter","setIsCounter","SYSTEM_MONITOR","storedNames","table","push","refreshCounter","setTimeout","handleSetRefreshingTables","tableName","storedTableName","remove","yesNoConst","YES","systemMonitorBlocks","INTERFACES","tableData","LAST_TRANSACTIONS","ENDPOINTS","mx","map","el","px","block","isSysMonitorInterfacesLoadingSelector","isSysMonitorEndpointsLoadingSelector","isSysMonitorSchedulerLoadingSelector","isSysMonitorLastTransactionsLoadingSelector","sysMonitorInterfacesSelector","sysMonitorEndpointsSelector","sysMonitorSchedulerSelector","sysMonitorLastTransactionsSelector","sysMonitorInterfacesCountsSelector","sysMonitorEndpointsCountsSelector","sysMonitorSchedulerCountsSelector","handleGetSysMonitorData","SystemMonitor","InstitutionsWrapper","Box","UiSessionsFilter","isMulti","uiSessions","filterUiSessions","resetUiSessions","currentUserId","history","currentUserDataForFilter","firstName","lastName","institutionName","loggedInUsername","handleGoToUsersActivity","usersActivityPathName","isUiSessionsLoadingSelector","uiSessionsSelector","activeItemIdSelector","handleFilterUiSessions","handleFilterUsersActivityByData","UiSessions"],"mappings":"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","file":"static/js/2.9bfbbe8f.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Table, withSpinner } from 'components';\n\nimport { IWithEditTable, withEditTable } from './withEditTable';\n\ninterface IPageTemplate extends IWithEditTable {\n  data: Array<object>;\n  columns: Array<object>;\n  isLoading: boolean;\n}\n\nexport const PageTemplate: React.FC<IPageTemplate> = props => {\n  const { onRowClick, activeTableRowIndex, ...pageTemplateProps } = props;\n\n  return (\n    <Table\n      getTrGroupProps={onRowClick}\n      activeRowIndex={activeTableRowIndex}\n      {...pageTemplateProps}\n    />\n  );\n};\n\nexport default withEditTable(\n  withSpinner()(PageTemplate)\n);\n","import React from 'react';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { connect } from 'react-redux';\nimport { ComponentPropsGetter0, ComponentPropsGetterR, RowInfo } from 'react-table';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { ContextMenuList } from 'components';\n\nimport { iconNamesConst, modalNamesConst } from 'consts';\n\nimport { modalsList } from 'containers/Modals/modalsList';\n\nimport {\n  activeTableRowIndexSelector,\n  IStoreState,\n  modalsStateListSelector,\n  openModal,\n  setActiveItemId,\n  setActiveTableRowIndex,\n  TOpenModal,\n  TSetActiveItemId,\n  TSetActiveTableRowIndex,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\n\nimport { componentUtil } from 'utils';\n\nexport interface IWithEditTable {\n  activeTableRowIndex?: number;\n  contextMenuItems?: Array<IContextMenuItem>;\n  handleOpenModal: TOpenModal;\n  modalsStateList: object;\n  onRowClick: ComponentPropsGetterR | ComponentPropsGetter0;\n  handleSetActiveItemId: TSetActiveItemId;\n  handleSetActiveTableRowIndex: TSetActiveTableRowIndex;\n  viewingModalName: string;\n}\n\nexport const withEditTable = <OriginProps extends {}>(\n  Component: React.ComponentType<OriginProps & Partial<IWithEditTable>>\n) => {\n  const WithEditTable: React.FC<IWithEditTable> = props => {\n    const {\n      activeTableRowIndex,\n      contextMenuItems = [],\n      handleOpenModal,\n      modalsStateList,\n      onRowClick,\n      handleSetActiveItemId,\n      handleSetActiveTableRowIndex,\n      viewingModalName,\n      ...originProps\n    } = props;\n\n    const [isOpenedModal, setIsOpenedModal] = React.useState(null);\n    const [isVisibleContextMenu, setIsVisibleContextMenu] = React.useState(false);\n\n    const handleRemoveActiveIds = React.useCallback(\n      () => {\n        setIsVisibleContextMenu(false);\n\n        handleSetActiveTableRowIndex(null);\n        handleSetActiveItemId(null);\n      },\n      [handleSetActiveTableRowIndex, handleSetActiveItemId]\n    );\n\n    React.useEffect(\n      () => {\n        const isSomeModalOpened = modalsList.find(modal => modalsStateList[`is${modal.name}`]);\n\n        setIsOpenedModal(isSomeModalOpened);\n      },\n      [modalsStateList]\n    );\n\n    React.useEffect(\n      () => {\n        if (!isOpenedModal) {\n          handleRemoveActiveIds();\n        }\n      },\n      [isOpenedModal, handleRemoveActiveIds]\n    );\n\n    const openCurrentRowInModal = React.useCallback(\n      () => handleOpenModal({ name: viewingModalName }),\n      [handleOpenModal, viewingModalName]\n    );\n\n    const onContextMenuClick = React.useCallback(\n      (e: Event, value: IContextMenuItem) => {\n        value.withConfirmation\n          ? handleOpenModal({\n            name: modalNamesConst.CONFIRMATION,\n            payload: {\n              confirmationAction: value.action,\n              confirmationTitle: value.confirmationTitle,\n              confirmationText: value.confirmationText,\n            },\n          })\n          : value.action();\n      },\n      [handleOpenModal]\n    );\n\n    const menuItems = React.useMemo(\n      () => {\n        const openItem = {\n          name: 'Open',\n          icon: iconNamesConst.EDIT,\n          action: () => openCurrentRowInModal(),\n        };\n\n        return viewingModalName ? [openItem, ...contextMenuItems] : contextMenuItems;\n      },\n      [contextMenuItems, viewingModalName, openCurrentRowInModal]\n    );\n\n    const handleClickOnRow = React.useCallback(\n      (_, rowInfo: RowInfo) => {\n        const isLocked = rowInfo.original.lockedFlag;\n        const id = rowInfo.original.id;\n        const rowIndexOriginal = rowInfo.index + 1; // from 1 for css style\n        const rowIndex = rowInfo.page\n          ? rowIndexOriginal - rowInfo.pageSize * rowInfo.page\n          : rowIndexOriginal; // considering page number\n\n        return {\n          onDoubleClick: () => {\n            if (viewingModalName) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              openCurrentRowInModal();\n            }\n          },\n          onContextMenu: () => {\n            if (menuItems.length) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              setIsVisibleContextMenu(true);\n            }\n          },\n          className: isLocked && 'is-gray',\n        };\n      },\n      [\n        openCurrentRowInModal,\n        viewingModalName,\n        menuItems,\n        handleSetActiveItemId,\n        handleSetActiveTableRowIndex,\n      ]\n    );\n\n    return (\n      <React.Fragment>\n        <ContextMenuTrigger\n          id=\"tableContextMenu\"\n          disable={!menuItems.length}\n        >\n          <Component\n            onRowClick={handleClickOnRow}\n            activeTableRowIndex={activeTableRowIndex}\n            {...originProps as OriginProps}\n          />\n        </ContextMenuTrigger>\n        <ContextMenuList\n          menuId=\"tableContextMenu\"\n          onClick={onContextMenuClick}\n          items={menuItems}\n          isHidden={isOpenedModal || !isVisibleContextMenu}\n          onHide={(!isOpenedModal && activeTableRowIndex) ? handleRemoveActiveIds : null}\n        />\n      </React.Fragment>\n    );\n  };\n\n  WithEditTable.displayName = `WithEditTable(${componentUtil.getDisplayName(Component)})`;\n\n  const mapStateToProps = (state: IStoreState) => ({\n    activeTableRowIndex: activeTableRowIndexSelector(state),\n    modalsStateList: modalsStateListSelector(state),\n  });\n\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n    {\n      handleOpenModal: openModal,\n      handleSetActiveItemId: setActiveItemId,\n      handleSetActiveTableRowIndex: setActiveTableRowIndex,\n    },\n    dispatch\n  );\n\n  return connect<Partial<IWithEditTable>, Partial<IWithEditTable>, any, IStoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n  )(WithEditTable);\n};\n","import React, { ReactChild } from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport { Flex } from '@rebass/grid';\nimport * as H from 'history';\nimport styled from 'theme';\n\nimport { Button } from 'components';\nimport { basePath, cookiesExpiresConst, formNamesConst, uiItemsConst } from 'consts';\nimport { TSetIsAccessibleFiltering, TStopAutoRefresh } from 'store';\nimport { cookiesUtil, storageUtil } from 'utils';\n\ninterface IFilterWrapper {\n  isHidden: boolean;\n}\n\nconst FilterWrapper = styled.div<IFilterWrapper>`\n  margin-bottom: 15px;\n  padding: 10px 15px 12px;\n  border: 1px solid ${({ theme }) => theme.colors.lighterGray};\n  border-radius: 2px;\n  background-color: ${({ theme }) => theme.colors.lighterGrayCell};\n\n  .title {\n    font-size: 18px;\n    color: ${({ theme, color }) => color || theme.colors.darkGray};\n    font-weight: bold;\n  }\n\n  ${({ isHidden }) => isHidden && `\n    display: none;\n  `};\n`;\n\ninterface IFilter {\n  filterAction: () => void;\n  filterValues: object;\n  isAutoRefresh: boolean;\n  isHidden: boolean;\n  isLoading: boolean;\n  location: H.Location;\n  setIsAccessibleFiltering: TSetIsAccessibleFiltering;\n  stopAutoRefresh: TStopAutoRefresh;\n  FilterForm: ReactChild;\n}\n\nexport const filteredFieldsToStore = (data: object) => {\n  return data && Object.keys(data)\n    .filter(key => !key.match(/dateFrom|dateTo|dateTimeFrom|dateTimeTo/gi))\n    .reduce(\n      (obj, key) => {\n        obj[key] = data[key];\n        return obj;\n      },\n      {}\n    );\n};\n\ntype TFilter = IFilter & InjectedFormProps<{}, IFilter>;\n\nconst Filter: React.FC<TFilter> = ({\n  FilterForm,\n  filterAction,\n  filterValues,\n  handleSubmit,\n  isAutoRefresh,\n  isHidden,\n  isLoading,\n  location,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n}) => {\n  const username = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      return userData && userData.username;\n    },\n    []\n  );\n\n  const valuesCount = React.useMemo(\n    () => filterValues\n      && Object.values(filterValues).reduce((acc, curr) => curr ? ++acc : acc, 0),\n    [filterValues]\n  );\n\n  const isAccessibleButton = React.useMemo(\n    () => {\n      const hasInstitution = filterValues && filterValues['institutionId'];\n      const hasTransactionId = filterValues && filterValues['transactionId'];\n      const hasAccountId = filterValues && filterValues['accountId'];\n      const hasCustomerId = filterValues && filterValues['customerId'];\n      const hasCardId = filterValues && filterValues['cardId'];\n      const hasProductName = filterValues && filterValues['productName'];\n      const hasAccountAlias = filterValues && filterValues['accountAlias'];\n      const hasPanAlias = filterValues && filterValues['panAlias'];\n      const hasLastName = filterValues && filterValues['lastName'];\n\n      const conditions = {\n        default: valuesCount > 0,\n        [`${basePath}${uiItemsConst.SYSTEM_PROPERTIES}`]: valuesCount >= 0,\n        [`${basePath}${uiItemsConst.USERS}`]: valuesCount >= 0,\n        [`${basePath}${uiItemsConst.SCHEDULER}`]: valuesCount >= 0,\n        [`${basePath}${uiItemsConst.API_CALLS}`]: valuesCount > 1,\n        [`${basePath}${uiItemsConst.USERS_ACTIVITY}`]: valuesCount > 1,\n        [`${basePath}${uiItemsConst.ACCOUNTS}`]: hasInstitution\n          && (hasAccountId || hasAccountAlias || hasLastName),\n        [`${basePath}${uiItemsConst.CARDS}`]: hasInstitution\n          && (hasAccountId || hasCardId || hasCustomerId || hasPanAlias),\n        [`${basePath}${uiItemsConst.STATEMENTS}`]: hasInstitution\n          && (hasAccountId || hasAccountAlias || hasLastName),\n        [`${basePath}${uiItemsConst.CUSTOMERS}`]: hasInstitution && (hasCustomerId || hasLastName),\n        [`${basePath}${uiItemsConst.TRANSACTIONS}`]: hasInstitution\n          && (hasTransactionId || hasProductName || hasCustomerId || hasAccountId),\n      };\n\n      return location.pathname in conditions ? conditions[location.pathname] : conditions.default;\n    },\n    [valuesCount, filterValues, location]\n  );\n\n  React.useEffect(\n    () => {\n      setIsAccessibleFiltering(isAccessibleButton);\n    },\n    [isAccessibleButton, setIsAccessibleFiltering]\n  );\n\n  // eslint-disable-next-line\n  const handleSubmitForm = React.useCallback(\n    handleSubmit(async data => {\n      await filterAction();\n\n      if (isAutoRefresh) {\n        stopAutoRefresh();\n      }\n\n      cookiesUtil.set(\n        `${location.pathname}-${username}`,\n        JSON.stringify(filteredFieldsToStore(data)),\n        { expires: cookiesExpiresConst.MONTH }\n      );\n    }),\n    [handleSubmit, filterAction, isAutoRefresh, stopAutoRefresh]\n  );\n\n  return (\n    <FilterWrapper isHidden={isHidden}>\n      <div className=\"title\">Filter</div>\n      <form onSubmit={handleSubmitForm}>\n        <Flex\n          width=\"960px\"\n          alignItems=\"flex-end\"\n          flexWrap=\"wrap\"\n          m=\"0 -8px 5px\"\n        >\n          {FilterForm}\n        </Flex>\n        <Button\n          text=\"Show\"\n          isLoading={isLoading}\n          disabled={!isAccessibleButton}\n        />\n      </form>\n    </FilterWrapper >\n  );\n};\n\nexport default reduxForm<{}, IFilter>({\n  form: formNamesConst.FILTER,\n  // keepDirtyOnReinitialize: true,\n  destroyOnUnmount: false,\n  enableReinitialize: true,\n})(Filter);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { getFormValues } from 'redux-form';\n\nimport { formNamesConst } from 'consts';\n\nimport Filter from './Filter';\n\nimport {\n  isAutoRefreshSelector,\n  IStoreState,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n} from 'store';\n\nconst formValues = getFormValues(formNamesConst.FILTER);\n\nconst mapStateToProps = (state: IStoreState) => ({\n  filterValues: formValues(state),\n  isAutoRefresh: isAutoRefreshSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    setIsAccessibleFiltering,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Filter);\n","import React, { ReactChild } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\n\nimport { Box, Flex } from '@rebass/grid';\n\nimport { Button, CountDownTimer, Dropdown, DropdownOption } from 'components';\nimport { IWithModal, withModal } from 'HOCs';\n\nimport { basePath, iconNamesConst } from 'consts';\n\nimport EditableTable from './EditableTable';\nimport Filter from './Filter';\nimport PageTitle from './PageTitle';\n\nimport {\n  IUiItem,\n  TResetUtils,\n  TSetActivePagePermission,\n  TSetIsOpenFilter,\n  TStopAutoRefresh,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\nimport { cookiesUtil, downloadUtil, storageUtil } from 'utils';\n\ninterface PageTemplateProps extends RouteComponentProps, IWithModal {\n  AdditionalButton?: ReactChild;\n  columns: Array<object>;\n  contextMenuItems?: Array<IContextMenuItem>;\n  data: Array<object>;\n  filterAction?: () => void;\n  filterData: object;\n  FilterForm?: ReactChild;\n  initialFilterValues?: object;\n  isAutoRefresh?: boolean;\n  isDownloadButton?: boolean;\n  isLoading: boolean;\n  isOpenFilter: boolean;\n  isReadOnly: boolean;\n  isSearchable?: boolean;\n  newModalName?: string;\n  resetUtils: TResetUtils;\n  setActivePagePermission: TSetActivePagePermission;\n  setIsOpenFilter: TSetIsOpenFilter;\n  stopAutoRefresh: TStopAutoRefresh;\n  title: string;\n  uiItems: Array<IUiItem>;\n}\n\nexport const PageTemplate: React.FC<PageTemplateProps> = props => {\n  const {\n    title,\n    data,\n    columns,\n    FilterForm,\n    filterAction,\n    openModal,\n    newModalName,\n    location,\n    isAutoRefresh,\n    stopAutoRefresh,\n    resetUtils,\n    AdditionalButton,\n    initialFilterValues,\n    filterData,\n    setIsOpenFilter,\n    isOpenFilter,\n    isDownloadButton,\n    isSearchable,\n    uiItems,\n    isReadOnly,\n    isLoading,\n    setActivePagePermission,\n    ...pageTemplateProps\n  } = props;\n\n  const [isFilterable, setIsFilterable] = React.useState(false);\n\n  React.useEffect(\n    () => {\n      const timer = isAutoRefresh && setInterval(() => filterAction(), 5000);\n\n      return () => clearInterval(timer);\n    },\n    [isAutoRefresh, filterAction]\n  );\n\n  const currentUiItem = React.useMemo(\n    () => uiItems.find(item => `${basePath}${item.id}` === `${location.pathname}`),\n    [location, uiItems]\n  );\n\n  React.useEffect(\n    () => {\n      const permission = currentUiItem && currentUiItem.permission;\n\n      setActivePagePermission(permission);\n    },\n    [setActivePagePermission, uiItems, location, currentUiItem]\n  );\n\n  React.useEffect(\n    () => {\n      return () => resetUtils();\n    },\n    [resetUtils]\n  );\n\n  const filterButtonText = React.useMemo(\n    () => isOpenFilter ? 'Hide Filter' : 'Show Filter',\n    [isOpenFilter]\n  );\n\n  const fileName = React.useMemo(\n    () => title.split(' ').join('_').toLowerCase(),\n    [title]\n  );\n\n  const isData = React.useMemo(\n    () => data && data.length,\n    [data]\n  );\n\n  const filterInitialValues = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      const username = userData && userData.username;\n\n      const storedFilter = cookiesUtil.get(`${location.pathname}-${username}`);\n\n      return {\n        ...initialFilterValues,\n        ...(storedFilter ? JSON.parse(storedFilter) : {}),\n      };\n    },\n    [initialFilterValues, location]\n  );\n\n  const isSearchableButton = React.useMemo(\n    () => isSearchable && data && data.length > 10,\n    [isSearchable, data]\n  );\n\n  const handleSetIsFilterable = React.useCallback(\n    () => setIsFilterable(!isFilterable),\n    [isFilterable]\n  );\n\n  const handleSetIsOpenFilter = React.useCallback(\n    () => setIsOpenFilter(!isOpenFilter),\n    [setIsOpenFilter, isOpenFilter]\n  );\n\n  const handleOpenModal = React.useCallback(\n    () => openModal({ name: newModalName }),\n    [openModal, newModalName]\n  );\n\n  return (\n    <React.Fragment>\n      <PageTitle\n        title={title}\n        pageId={currentUiItem && currentUiItem.id}\n      />\n      {FilterForm && (\n        <Box mb=\"5px\">\n          <Button\n            text={filterButtonText}\n            iconName={iconNamesConst.FILTER}\n            onClick={handleSetIsOpenFilter}\n          />\n        </Box>\n      )}\n      {FilterForm && (\n        <Filter\n          filterAction={filterAction}\n          initialValues={filterInitialValues}\n          isHidden={!isOpenFilter}\n          isLoading={isLoading}\n          location={location}\n          FilterForm={FilterForm}\n        />\n      )}\n      <Flex alignItems=\"center\" fontSize=\"0px\">\n        {newModalName && !isReadOnly && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Add New\"\n              iconName={iconNamesConst.PLUS}\n              onClick={handleOpenModal}\n              disabled={isLoading}\n            />\n          </Box>\n        )}\n        {isSearchableButton && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Search\"\n              disabled={!isData || isLoading}\n              iconName={iconNamesConst.SEARCH}\n              onClick={handleSetIsFilterable}\n            />\n          </Box>\n        )}\n        {AdditionalButton && (\n          <Box mr=\"20px\">\n            {AdditionalButton}\n          </Box>\n        )}\n        {isDownloadButton && (\n          <Box mr=\"20px\">\n            <Dropdown\n              selectable={false}\n              isDisabled={!isData}\n              dropdownListPosition=\"center\"\n              ToggleButtonComponent={(\n                <Button\n                  text=\"Download\"\n                  iconName={iconNamesConst.DOWNLOAD}\n                  disabled={isLoading}\n                />\n              )}\n            >\n              <DropdownOption>\n                <Button\n                  text=\".csv\"\n                  iconName={iconNamesConst.FILE}\n                  onClick={() => downloadUtil.downloadCSV(fileName, data)}\n                  classNames={['no-text-transform']}\n                  disabled={isLoading}\n                />\n              </DropdownOption>\n            </Dropdown>\n          </Box>\n        )}\n        {isAutoRefresh && (\n          <Flex alignItems=\"flex-end\">\n            <CountDownTimer seconds={5} />\n            <Box ml=\"4px\">\n              <Button\n                text=\"Stop Auto Refreshing\"\n                size=\"11\"\n                iconName={iconNamesConst.STOP}\n                onClick={stopAutoRefresh}\n                disabled={isLoading}\n              />\n            </Box>\n          </Flex>\n        )}\n      </Flex>\n      <Box mt=\"5px\">\n        <EditableTable\n          data={data}\n          columns={columns}\n          filterable={isFilterable}\n          isLoading={isLoading}\n          {...pageTemplateProps}\n        />\n      </Box>\n    </React.Fragment >\n  );\n};\n\nexport default withModal(\n  withRouter(PageTemplate)\n);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport PageTemplate from './PageTemplate';\n\nimport {\n  isAutoRefreshSelector,\n  isOpenFilterSelector,\n  isReadOnlySelector,\n  IStoreState,\n  resetUtils,\n  setActivePagePermission,\n  setIsOpenFilter,\n  stopAutoRefresh,\n  uiItemsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isAutoRefresh: isAutoRefreshSelector(state),\n  isOpenFilter: isOpenFilterSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n  uiItems: uiItemsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    resetUtils,\n    setIsOpenFilter,\n    setActivePagePermission,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PageTemplate);\n","import { TableCell, TableHeader } from 'components';\n\nimport { IUsersActivityItem } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IUsersActivityItem> = ITableCell<IUsersActivityItem[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"ID\" />,\n    accessor: 'id',\n    Cell: (props: TCell<'id'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"User Name\" />,\n    accessor: 'username',\n    Cell: (props: TCell<'username'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Event Date Time\" />,\n    accessor: 'eventDatetime',\n    Cell: (props: TCell<'eventDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 350,\n    Header: <TableHeader title=\"API Name\" />,\n    accessor: 'apiName',\n    Cell: (props: TCell<'apiName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    Header: <TableHeader title=\"Description\" />,\n    accessor: 'description',\n    Cell: (props: TCell<'description'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { Field } from 'redux-form';\n\nimport { Box } from '@rebass/grid';\n\nimport { MaskField, SelectField } from 'components';\n\nimport { dateFormatConst, maskFormatConst, } from 'consts';\n\nimport { THandleGetUsersActivityUsers } from 'store';\nimport { ISelectValue } from 'types';\nimport { formErrorUtil } from 'utils';\n\ninterface IUsersActivityFilter {\n  institutionsOptions: Array<ISelectValue>;\n  getUsers: THandleGetUsersActivityUsers;\n  currentInstitution: ISelectValue;\n  usersOptions: Array<ISelectValue>;\n  isLoadingUsers: boolean;\n  isDisabled: boolean;\n}\n\nconst UsersActivityFilter: React.FC<IUsersActivityFilter> = ({\n  usersOptions,\n  institutionsOptions,\n  getUsers,\n  currentInstitution,\n  isLoadingUsers,\n  isDisabled,\n}) => {\n  const currentInstitutionId = currentInstitution && currentInstitution.value;\n\n  React.useEffect(\n    () => {\n      if (currentInstitutionId) {\n        getUsers(currentInstitutionId);\n      }\n    },\n    [getUsers, currentInstitutionId]\n  );\n\n  return (\n    <React.Fragment>\n      <Box width=\"300px\" p=\"8px\">\n        <Field\n          id=\"institutionId\"\n          name=\"institutionId\"\n          component={SelectField}\n          label=\"Institution\"\n          placeholder=\"Select Institution\"\n          options={institutionsOptions}\n          isClearable={false}\n          isDisabled={isDisabled}\n          isRequired={true}\n          validate={[formErrorUtil.isRequired]}\n        />\n      </Box>\n      <Box width=\"300px\" p=\"8px\">\n        <Field\n          id=\"username\"\n          name=\"username\"\n          component={SelectField}\n          label=\"User Name\"\n          options={usersOptions}\n          placeholder=\"Select Username\"\n          isLoading={isLoadingUsers}\n          disabled={isDisabled}\n        />\n      </Box>\n      <Box width=\"180px\" p=\"8px\" >\n        <Field\n          id=\"usersActivityDateTimeFrom\"\n          name=\"usersActivityDateTimeFrom\"\n          component={MaskField}\n          label=\"Date&nbsp;/&nbsp;Time From\"\n          placeholder={dateFormatConst.DATE_TIME}\n          mask={maskFormatConst.DATE_TIME}\n          disabled={isDisabled}\n          isRequired={true}\n          validate={[\n            formErrorUtil.isRequired,\n            formErrorUtil.isDateTime,\n          ]}\n        />\n      </Box>\n      <Box width=\"180px\" p=\"8px\" >\n        <Field\n          id=\"usersActivityDateTimeTo\"\n          name=\"usersActivityDateTimeTo\"\n          component={MaskField}\n          label=\"Date&nbsp;/&nbsp;Time To\"\n          placeholder={dateFormatConst.DATE_TIME}\n          mask={maskFormatConst.DATE_TIME}\n          disabled={isDisabled}\n          isRequired={true}\n          validate={[\n            formErrorUtil.isRequired,\n            formErrorUtil.isDateTime,\n          ]}\n        />\n      </Box>\n    </React.Fragment>\n  );\n};\n\nexport default UsersActivityFilter;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { formValueSelector } from 'redux-form';\n\nimport { formNamesConst } from 'consts';\n\nimport UsersActivityFilter from './UsersActivityFilter';\n\nimport {\n  handleGetUsersActivityUsers,\n  IStoreState,\n  isUsersActivityUsersLoadingSelector,\n  usersActivityUsersSelector,\n} from 'store';\n\nconst formSelector = formValueSelector(formNamesConst.FILTER);\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoadingUsers: isUsersActivityUsersLoadingSelector(state),\n  usersOptions: usersActivityUsersSelector(state),\n  currentInstitution: formSelector(state, 'institutionId'),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getUsers: handleGetUsersActivityUsers,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UsersActivityFilter);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { UsersActivityFilter } from './forms';\n\nimport {\n  IUsersActivityItem,\n  THandleFilterUsersActivity,\n  TResetUsersActivity,\n} from 'store';\nimport { ISelectValue } from 'types';\nimport { dateUtil } from 'utils';\n\ninterface IUsersActivity {\n  institutionsOptions: Array<ISelectValue>;\n  usersActivity: ImmutableArray<IUsersActivityItem>;\n  filterUsersActivity: THandleFilterUsersActivity;\n  resetUsersActivity: TResetUsersActivity;\n  isLoading: boolean;\n}\n\nconst UsersActivity: React.FC<IUsersActivity> = ({\n  institutionsOptions,\n  usersActivity,\n  filterUsersActivity,\n  resetUsersActivity,\n  isLoading,\n}) => {\n  const [dateTimeFrom, setDateTimeFrom] = React.useState(null);\n  const [dateTimeTo, setDateTimeTo] = React.useState(null);\n\n  React.useEffect(\n    () => {\n      setDateTimeFrom(dateUtil.yesterdayDateTime());\n      setDateTimeTo(dateUtil.todayDateTime());\n\n      return () => resetUsersActivity();\n    },\n    [resetUsersActivity]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n        usersActivityDateTimeFrom: dateTimeFrom,\n        usersActivityDateTimeTo: dateTimeTo,\n      };\n    },\n    [institutionsOptions, dateTimeFrom, dateTimeTo]\n  );\n\n  return (\n    <PageTemplate\n      title=\"User Activity\"\n      data={usersActivity}\n      columns={tableColumns}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      filterAction={filterUsersActivity}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <UsersActivityFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default UsersActivity;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport UsersActivity from './UsersActivity';\n\nimport {\n  handleFilterUsersActivity,\n  IStoreState,\n  isUsersActivityLoadingSelector,\n  resetUsersActivity,\n  userInstitutionsOptionsSelector,\n  usersActivitySelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isUsersActivityLoadingSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  usersActivity: usersActivitySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterUsersActivity: handleFilterUsersActivity,\n    resetUsersActivity,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UsersActivity);\n","import { TableCell, TableHeader } from 'components';\n\nimport { IApiCall } from 'store';\n\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IApiCall> = ITableCell<IApiCall[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"ID\" />,\n    accessor: 'id',\n    Cell: (props: TCell<'id'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institutionId',\n    Cell: (props: TCell<'institutionId'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Endpoint ID\" />,\n    accessor: 'endpointId',\n    Cell: (props: TCell<'endpointId'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Endpoint Name\" />,\n    accessor: 'endpointName',\n    Cell: (props: TCell<'endpointName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Event Date Time\" />,\n    accessor: 'eventDatetime',\n    Cell: (props: TCell<'eventDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 120,\n    Header: <TableHeader title=\"API Name\" />,\n    accessor: 'apiName',\n    Cell: (props: TCell<'apiName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    Header: <TableHeader title=\"Request Body\" />,\n    accessor: 'requestBody',\n    Cell: (props: TCell<'requestBody'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    Header: <TableHeader title=\"Response Body\" />,\n    accessor: 'responseBody',\n    Cell: (props: TCell<'responseBody'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { modalNamesConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { ApiCallsFilter } from './forms';\n\nimport { IApiCall, THandleFilterApiCalls, TResetApiCalls } from 'store';\nimport { ISelectValue } from 'types';\nimport { dateUtil } from 'utils';\n\ninterface IApiCalls {\n  apiCalls: ImmutableArray<IApiCall>;\n  filterApiCalls: THandleFilterApiCalls;\n  institutionsOptions: Array<ISelectValue>;\n  resetApiCalls: TResetApiCalls;\n  isLoading: boolean;\n}\n\nconst ApiCalls: React.FC<IApiCalls> = ({\n  apiCalls,\n  filterApiCalls,\n  institutionsOptions,\n  resetApiCalls,\n  isLoading,\n}) => {\n  const [dateTimeFrom, setDateTimeFrom] = React.useState(null);\n  const [dateTimeTo, setDateTimeTo] = React.useState(null);\n\n  React.useEffect(\n    () => {\n      setDateTimeFrom(dateUtil.yesterdayDateTime());\n      setDateTimeTo(dateUtil.todayDateTime());\n\n      return () => resetApiCalls();\n    },\n    [resetApiCalls]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n        apiCallsDateTimeFrom: dateTimeFrom,\n        apiCallsDateTimeTo: dateTimeTo,\n      };\n    },\n    [institutionsOptions, dateTimeFrom, dateTimeTo]\n  );\n\n  return (\n    <PageTemplate\n      title=\"API Calls\"\n      data={apiCalls}\n      columns={tableColumns}\n      viewingModalName={modalNamesConst.API_CALL}\n      filterAction={filterApiCalls}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      initialFilterValues={initialFilterValues}\n      FilterForm={\n        <ApiCallsFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\nexport default ApiCalls;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport ApiCalls from './ApiCalls';\n\nimport {\n  apiCallsSelector,\n  handleFilterApiCalls,\n  isLoadingApiCallsSelector,\n  IStoreState,\n  resetApiCalls,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isLoadingApiCallsSelector(state),\n  apiCalls: apiCallsSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterApiCalls: handleFilterApiCalls,\n    resetApiCalls,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ApiCalls);\n","import React from 'react';\nimport { Field } from 'redux-form';\n\nimport { Box } from '@rebass/grid';\n\nimport { MaskField, SelectField } from 'components';\n\nimport { dateFormatConst, maskFormatConst, } from 'consts';\n\nimport { THandleGetSchedulerNamesByInstId } from 'store';\n\nimport { ISelectValue } from 'types';\nimport { formErrorUtil } from 'utils';\n\ninterface IScheduledJobsFilter {\n  institutionsOptions: Array<ISelectValue>;\n  getSchedulerNames: THandleGetSchedulerNamesByInstId;\n  institutionValue: ISelectValue;\n  schedulerNameOptions: Array<ISelectValue>;\n  isLoadingSchedulerNames: boolean;\n  isDisabled: boolean;\n}\n\nconst ScheduledJobsFilter: React.FC<IScheduledJobsFilter> = ({\n  institutionsOptions,\n  institutionValue,\n  getSchedulerNames,\n  schedulerNameOptions,\n  isLoadingSchedulerNames,\n  isDisabled,\n}) => {\n  const currentInstitutionId = institutionValue && institutionValue.value;\n\n  React.useEffect(\n    () => {\n      if (currentInstitutionId) {\n        getSchedulerNames(currentInstitutionId);\n      }\n    },\n    [getSchedulerNames, currentInstitutionId]\n  );\n\n  return (\n    <React.Fragment>\n      <Box width=\"300px\" p=\"8px\">\n        <Field\n          id=\"institutionId\"\n          name=\"institutionId\"\n          component={SelectField}\n          label=\"Institution\"\n          placeholder=\"Select Institution\"\n          options={institutionsOptions}\n          isClearable={false}\n          isDisabled={isDisabled}\n          isRequired={true}\n          validate={[formErrorUtil.isRequired]}\n        />\n      </Box>\n      <Box width=\"300px\" p=\"8px\">\n        <Field\n          id=\"scheduler\"\n          name=\"scheduler\"\n          component={SelectField}\n          options={schedulerNameOptions}\n          label=\"Scheduler\"\n          placeholder=\"Select Scheduler\"\n          isLoading={isLoadingSchedulerNames}\n          isDisabled={isDisabled}\n        />\n      </Box>\n      <Box width=\"180px\" p=\"8px\" >\n        <Field\n          id=\"scheduledJobsDateTimeFrom\"\n          name=\"scheduledJobsDateTimeFrom\"\n          component={MaskField}\n          label=\"Date&nbsp;/&nbsp;Time From\"\n          placeholder={dateFormatConst.DATE_TIME}\n          mask={maskFormatConst.DATE_TIME}\n          disabled={isDisabled}\n          isRequired={true}\n          validate={[\n            formErrorUtil.isRequired,\n            formErrorUtil.isDateTime,\n          ]}\n        />\n      </Box>\n      <Box width=\"180px\" p=\"8px\" >\n        <Field\n          id=\"scheduledJobsDateTimeTo\"\n          name=\"scheduledJobsDateTimeTo\"\n          component={MaskField}\n          label=\"Date&nbsp;/&nbsp;Time To\"\n          placeholder={dateFormatConst.DATE_TIME}\n          mask={maskFormatConst.DATE_TIME}\n          disabled={isDisabled}\n          isRequired={true}\n          validate={[\n            formErrorUtil.isRequired,\n            formErrorUtil.isDateTime,\n          ]}\n        />\n      </Box>\n    </React.Fragment>\n  );\n};\n\nexport default ScheduledJobsFilter;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { formValueSelector } from 'redux-form';\n\nimport { formNamesConst } from 'consts';\n\nimport ScheduledJobsFilter from './ScheduledJobsFilter';\n\nimport {\n  handleGetSchedulerNamesByInstId,\n  instSchedulerNamesOptions,\n  isSchedulerJobNamesGettingSelector,\n  IStoreState,\n} from 'store';\n\nconst formSelector = formValueSelector(formNamesConst.FILTER);\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoadingSchedulerNames: isSchedulerJobNamesGettingSelector(state),\n  schedulerNameOptions: instSchedulerNamesOptions(state),\n  institutionValue: formSelector(state, 'institutionId'),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getSchedulerNames: handleGetSchedulerNamesByInstId,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ScheduledJobsFilter);\n","import { TableCell, TableHeader } from 'components';\n\nimport { IScheduledJob } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IScheduledJob> = ITableCell<IScheduledJob[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"ID\" />,\n    accessor: 'id',\n    Cell: (props: TCell<'id'>) => (\n      <TableCell\n        value={props.value}\n        isNumber={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 200,\n    Header: <TableHeader title=\"Scheduler\" />,\n    accessor: 'scheduler',\n    Cell: (props: TCell<'scheduler'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Date&nbsp;/&nbsp;Time From\" />,\n    accessor: 'dateTimeFrom',\n    Cell: (props: TCell<'dateTimeFrom'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Date&nbsp;/&nbsp;Time To\" />,\n    accessor: 'dateTimeTo',\n    Cell: (props: TCell<'dateTimeTo'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Execution Result\" />,\n    accessor: 'executionResult',\n    Cell: (props: TCell<'executionResult'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    Header: <TableHeader title=\"Error Description\" />,\n    accessor: 'errorDescription',\n    Cell: (props: TCell<'errorDescription'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { ScheduledJobsFilter } from './forms';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\n\nimport { iconNamesConst, systemMonitorTablesConst } from 'consts';\n\nimport {\n  HandleGetLogData,\n  IScheduledJob,\n  THandleFilterScheduledJobs,\n  TResetScheduledJobs,\n} from 'store';\nimport { ISelectValue } from 'types';\nimport { dateUtil } from 'utils';\n\ninterface IScheduledJobs {\n  institutionsOptions: Array<ISelectValue>;\n  scheduledJobs: ImmutableArray <IScheduledJob>;\n  filterScheduledJobs: THandleFilterScheduledJobs;\n  getLogData: HandleGetLogData;\n  resetScheduledJobs: TResetScheduledJobs;\n  currentSchedulerId: number;\n  currentScheduledJobName: string;\n  isLoading: boolean;\n}\n\nconst ScheduledJobs: React.FC<IScheduledJobs> = ({\n  institutionsOptions,\n  scheduledJobs,\n  filterScheduledJobs,\n  resetScheduledJobs,\n  getLogData,\n  currentSchedulerId,\n  currentScheduledJobName,\n  isLoading,\n}) => {\n  const [dateTimeFrom, setDateTimeFrom] = React.useState(null);\n  const [dateTimeTo, setDateTimeTo] = React.useState(null);\n\n  React.useEffect(\n    () => {\n      setDateTimeFrom(dateUtil.yesterdayDateTime());\n      setDateTimeTo(dateUtil.todayDateTime());\n\n      return () => resetScheduledJobs();\n    },\n    [resetScheduledJobs]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Show log',\n        icon: iconNamesConst.SHORT_TEXT,\n        action: () => getLogData({\n          id: currentSchedulerId,\n          name: systemMonitorTablesConst.SCHEDULER_JOBS,\n          title: currentScheduledJobName,\n        }),\n      },\n    ],\n    [getLogData, currentSchedulerId, currentScheduledJobName]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Scheduled Jobs\"\n      data={scheduledJobs}\n      columns={tableColumns}\n      isDownloadButton={true}\n      isLoading={isLoading}\n      filterAction={filterScheduledJobs}\n      contextMenuItems={contextMenuItems}\n      initialFilterValues={{\n        institutionId: institutionsOptions[0],\n        scheduledJobsDateTimeFrom: dateTimeFrom,\n        scheduledJobsDateTimeTo: dateTimeTo,\n      }}\n      FilterForm={\n        <ScheduledJobsFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default ScheduledJobs;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport ScheduledJobs from './ScheduledJobs';\n\nimport {\n  currentScheduledJobIdSelector,\n  currentScheduledJobNameSelector,\n  handleFilterScheduledJobs,\n  handleGetLogData,\n  isScheduledJobsLoadingSelector,\n  isSysMonitorLoadingLogDataSelector,\n  IStoreState,\n  resetScheduledJobs,\n  scheduledJobsSelector,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isSysMonitorLoadingLogDataSelector(state)\n    || isScheduledJobsLoadingSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  scheduledJobs: scheduledJobsSelector(state),\n  currentSchedulerId: currentScheduledJobIdSelector(state),\n  currentScheduledJobName: currentScheduledJobNameSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterScheduledJobs: handleFilterScheduledJobs,\n    getLogData: handleGetLogData,\n    resetScheduledJobs,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ScheduledJobs);\n","import React, { ReactChild } from 'react';\n\nimport { Box, Flex } from '@rebass/grid';\nimport styled from 'theme';\n\nimport { ChevronDownIcon, Hr } from 'components';\n\ninterface ICollapseButton {\n  isOpen: boolean;\n}\n\nconst CollapseButton = styled(ChevronDownIcon)<ICollapseButton>`\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.gray};\n  transition: all .1s linear;\n\n  ${({ isOpen }) => isOpen && `\n    transform: rotate(-180deg);\n  `}\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.normalAccent};\n  }\n`;\n\nconst CollapseHeader = styled.div`\n  .header {\n    z-index: 11;\n  }\n`;\n\ninterface ICollapse {\n  header?: ReactChild;\n  additionalTool?: ReactChild;\n}\n\nconst Collapse: React.FC<ICollapse> = ({\n  children,\n  header,\n  additionalTool,\n}) => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  return (\n    <div>\n      <CollapseHeader>\n        <Flex\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          {header && (\n            <div className=\"header\">{header}</div>\n          )}\n          <Flex alignItems=\"flex-end\">\n            {additionalTool && (\n              <Box mb=\"4px\">{additionalTool}</Box>\n            )}\n            <Box mb=\"3px\">\n              <CollapseButton\n                size=\"24\"\n                className=\"icon\"\n                isOpen={isOpen}\n                onClick={() => setIsOpen(!isOpen)}\n              />\n            </Box>\n          </Flex>\n        </Flex>\n      </CollapseHeader>\n      {isOpen && (\n        <React.Fragment>{children}</React.Fragment>\n      )}\n      {!isOpen && (\n        <Hr noSpace={true} />\n      )}\n    </div>\n  );\n};\n\nexport default Collapse;\n","import React from 'react';\n\nimport styled from 'theme';\n\nconst SysMonitorBoxWrapper = styled.div`\n  position: relative;\n  margin-bottom: 30px;\n\n  .loading {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: ${({ theme }) => theme.colors.white};\n    color: ${({ theme }) => theme.colors.darkGray};\n    font-weight: bold;\n    font-size: 10px;\n    letter-spacing: .5pt;\n    text-transform: uppercase;\n    z-index: 10;\n  }\n`;\n\ninterface ISysMonitorBox {\n  isLoading: boolean;\n}\n\nconst SysMonitorBox: React.FC<ISysMonitorBox> = ({\n  children,\n  isLoading,\n}) => {\n  return (\n    <SysMonitorBoxWrapper>\n      {children}\n      {isLoading && (\n        <div className=\"loading\">Loading...</div>\n      )}\n    </SysMonitorBoxWrapper>\n  );\n};\n\nexport default SysMonitorBox;\n","import React from 'react';\n\nimport { Box, Flex } from '@rebass/grid';\n\nimport styled from 'theme';\n\nimport { CheckedBoxIcon, SmallText, UncheckedBoxIcon } from 'components';\n\nconst CheckBoxWrapper = styled(Flex)`\n  align-items: flex-start;\n  cursor: pointer;\n`;\n\ninterface IRefreshCheckbox {\n  value: boolean;\n  onClick: () => void;\n}\n\nconst RefreshCheckbox: React.FC<IRefreshCheckbox> = ({\n  value,\n  onClick,\n}) => {\n  const [isChecked, setIsChecked] = React.useState(value);\n\n  const handleClick = React.useCallback(\n    () => {\n      onClick();\n      setIsChecked(!isChecked);\n    },\n    [isChecked, onClick]\n  );\n\n  return (\n    <CheckBoxWrapper onClick={handleClick}>\n      {isChecked\n        ? (<CheckedBoxIcon />)\n        : (<UncheckedBoxIcon />)\n      }\n      <Box ml=\"5px\" mb=\"3px\">\n        <SmallText>Refresh table</SmallText>\n      </Box>\n    </CheckBoxWrapper>\n  );\n};\n\nexport default RefreshCheckbox;\n","import React from 'react';\n\nimport { Box, Flex } from '@rebass/grid';\n\nimport { SmallText, T4 } from 'components';\n\nimport { ISysMonitorCounts } from 'store';\n\ninterface IHeader {\n  title: string;\n  counts?: ISysMonitorCounts;\n}\n\nconst Header: React.FC<IHeader> = ({\n  title,\n  counts,\n}) => {\n  return (\n    <Flex alignItems=\"baseline\" justifyContent=\"space-between\">\n      <Box mr=\"10px\">\n        <T4>{title}</T4>\n      </Box>\n      {counts && (\n        <SmallText>{counts.countActive} active, {counts.countFaulty} faulty</SmallText>\n      )}\n    </Flex>\n  );\n};\n\nexport default Header;\n","import { CellInfo } from 'react-table';\n\nimport { Flex } from '@rebass/grid';\n\nimport { Button, TableCell, TableHeader } from 'components';\nimport { HandleGetLogData, ISysMonitorItem } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof ISysMonitorItem> = ITableCell<ISysMonitorItem[T]>;\n\nexport const tableColumns = (getLogData: HandleGetLogData, name: string) => [\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institutionName',\n    Cell: (props: TCell<'institutionName'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 260,\n    Header: <TableHeader title=\"Name\" />,\n    accessor: 'name',\n    Cell: (props: TCell<'name'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Status\" />,\n    accessor: 'status',\n    Cell: (props: TCell<'status'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 140,\n    Header: <TableHeader title=\"Last Message Date&nbsp;/&nbsp;Time\" />,\n    accessor: 'lastMessageDatetime',\n    Cell: (props: TCell<'lastMessageDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 140,\n    Header: <TableHeader title=\"Last Fault Date&nbsp;/&nbsp;Time\" />,\n    accessor: 'lastFaultDatetime',\n    Cell: (props: TCell<'lastFaultDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 85,\n    accessor: 'showLogButton',\n    Cell: (cellInfo: CellInfo) => (\n      <Flex\n        alignItems=\"flex-start\"\n        p=\"7px 5px\"\n      >\n        <Button\n          text=\"Show log\"\n          size=\"10\"\n          classNames={['is-bordered']}\n          onClick={() => getLogData({\n            name,\n            id: cellInfo.original.id,\n            title: cellInfo.original.name,\n          })}\n        />\n      </Flex>\n    ),\n  },\n];\n","import { CellInfo } from 'react-table';\n\nimport { Flex } from '@rebass/grid';\n\nimport { Button, TableCell, TableHeader } from 'components';\nimport { HandleGetLogData, ISysMonitorScheduler } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof ISysMonitorScheduler> = ITableCell<ISysMonitorScheduler[T]>;\n\nexport const schedulerTableColumns = (getLogData: HandleGetLogData, name: string) => [\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institutionName',\n    Cell: (props: TCell<'institutionName'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 300,\n    Header: <TableHeader title=\"Name\" />,\n    accessor: 'name',\n    Cell: (props: TCell<'name'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Status\" />,\n    accessor: 'status',\n    Cell: (props: TCell<'status'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 85,\n    accessor: 'showLogButton',\n    Cell: (cellInfo: CellInfo) => (\n      <Flex\n        alignItems=\"flex-start\"\n        p=\"7px 5px\"\n      >\n        <Button\n          text=\"Show log\"\n          size=\"10\"\n          classNames={['is-bordered']}\n          onClick={() => getLogData({\n            name,\n            id: cellInfo.original.id,\n            title: cellInfo.original.name,\n          })}\n        />\n      </Flex>\n    ),\n  },\n];\n","import { TableCell, TableHeader } from 'components';\nimport { ISysMonitorTransaction } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof ISysMonitorTransaction> = ITableCell<ISysMonitorTransaction[T]>;\n\nexport const transactionsTableColumns = [\n  {\n    maxWidth: 130,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institutionName',\n    Cell: (props: TCell<'institutionName'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 140,\n    Header: <TableHeader title=\"Transaction Date&nbsp;/&nbsp;Time\" />,\n    accessor: 'transactionDatetime',\n    Cell: (props: TCell<'transactionDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n        isSmaller={true}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { Box, Flex } from '@rebass/grid';\n\nimport { CountDownTimer, Table, withSpinner } from 'components';\n\nimport {\n  basePath,\n  cookiesExpiresConst,\n  systemMonitorTablesConst,\n  uiItemsConst,\n  yesNoConst,\n} from 'consts';\n\nimport {\n  Collapse,\n  Header,\n  RefreshCheckbox,\n  schedulerTableColumns,\n  SysMonitorBox,\n  tableColumns,\n  transactionsTableColumns,\n} from './components';\n\nimport PageTitle from 'containers/PageTemplate/PageTitle';\n\nimport {\n  HandleGetLogData,\n  HandleGetSysMonitorData,\n  ISysMonitorCounts,\n  ISysMonitorItem,\n  ISysMonitorScheduler,\n  ISysMonitorTransaction,\n  ResetSysMonitor,\n} from 'store';\nimport { cookiesUtil } from 'utils';\n\ninterface ISystemMonitor {\n  interfacesData: ImmutableArray<ISysMonitorItem>;\n  endpointsData: ImmutableArray<ISysMonitorItem>;\n  schedulerData: ImmutableArray<ISysMonitorScheduler>;\n  lastTransactionsData: ImmutableArray<ISysMonitorTransaction>;\n  getLogData: HandleGetLogData;\n  getSysMonitorData: HandleGetSysMonitorData;\n  isLoadingInterfaces: boolean;\n  isLoadingEndpoints: boolean;\n  isLoadingScheduler: boolean;\n  isLoadingLastTransactions: boolean;\n  interfacesCounts: ISysMonitorCounts;\n  endpointsCounts: ISysMonitorCounts;\n  schedulerCounts: ISysMonitorCounts;\n  resetSysMonitor: ResetSysMonitor;\n}\n\ninterface ISysMonitorBlock {\n  id: number;\n  name: string;\n  title: string;\n  isLoading: boolean;\n  tableData: Array<object>;\n  columns: Array<object>;\n  counts?: ISysMonitorCounts;\n}\n\nconst SystemMonitor: React.FC<ISystemMonitor> = ({\n  getSysMonitorData,\n  resetSysMonitor,\n  interfacesData,\n  endpointsData,\n  schedulerData,\n  lastTransactionsData,\n  isLoadingInterfaces,\n  isLoadingEndpoints,\n  isLoadingScheduler,\n  isLoadingLastTransactions,\n  interfacesCounts,\n  endpointsCounts,\n  schedulerCounts,\n  getLogData,\n}) => {\n  const [refreshingTables, setRefreshingTables] = React.useState([]);\n  const [isCounter, setIsCounter] = React.useState(false);\n\n  const location = `${basePath}${uiItemsConst.SYSTEM_MONITOR}`;\n\n  // get data for each table and reset it on unmount\n  React.useEffect(\n    () => {\n      getSysMonitorData();\n      return () => resetSysMonitor();\n    },\n    [getSysMonitorData, resetSysMonitor]\n  );\n\n  // get table names which have to be refreshed from cookies and set to state\n  React.useEffect(\n    () => {\n      const storedNames = [];\n\n      for (const table in systemMonitorTablesConst) {\n        if (cookiesUtil.get(`${location}/${systemMonitorTablesConst[table]}`)) {\n          storedNames.push(systemMonitorTablesConst[table]);\n        }\n      }\n\n      setRefreshingTables(storedNames);\n\n      if (storedNames.length > 0) {\n        refreshCounter();\n      }\n    },\n    [location]\n  );\n\n  const refreshCounter = () => {\n    setIsCounter(false);\n    setTimeout(() => setIsCounter(true), 50);\n  };\n\n  // refresh each table which is in refreshingTables state\n  React.useEffect(\n    () => {\n      const timer = isCounter && setInterval(\n        () => {\n          getSysMonitorData(refreshingTables);\n          refreshCounter();\n        },\n        60000\n      );\n      return () => clearInterval(timer);\n    },\n    [getSysMonitorData, isCounter, refreshingTables]\n  );\n\n  const handleSetRefreshingTables = React.useCallback(\n    (tableName: string) => {\n      const hasTableName = refreshingTables.find(name => name === tableName);\n\n      if (!hasTableName) {\n        getSysMonitorData([tableName]); // update current table\n        setRefreshingTables([...refreshingTables, tableName]);\n        refreshCounter();\n      } else {\n        setRefreshingTables(refreshingTables.filter(name => name !== tableName));\n\n        if (refreshingTables.length <= 1) {\n          setIsCounter(false);\n        } else {\n          refreshCounter();\n        }\n      }\n\n      const storedTableName = `${location}/${tableName}`;\n\n      if (cookiesUtil.get(storedTableName)) {\n        cookiesUtil.remove(storedTableName);\n      } else {\n        cookiesUtil.set(\n          storedTableName,\n          JSON.stringify(yesNoConst.YES),\n          { expires: cookiesExpiresConst.MONTH }\n        );\n      }\n    },\n    [refreshingTables, getSysMonitorData, location]\n  );\n\n  const systemMonitorBlocks = React.useMemo(\n    () => [\n      [\n        {\n          id: 1,\n          name: systemMonitorTablesConst.INTERFACES,\n          title: 'Interfaces',\n          counts: interfacesCounts,\n          isLoading: isLoadingInterfaces,\n          tableData: interfacesData,\n          columns: tableColumns(getLogData, systemMonitorTablesConst.INTERFACES),\n        },\n        {\n          id: 2,\n          name: systemMonitorTablesConst.LAST_TRANSACTIONS,\n          title: 'Last Transactions',\n          isLoading: isLoadingLastTransactions,\n          tableData: lastTransactionsData,\n          columns: transactionsTableColumns,\n        },\n      ],\n      [\n        {\n          id: 3,\n          name: systemMonitorTablesConst.ENDPOINTS,\n          title: 'Endpoints',\n          counts: endpointsCounts,\n          isLoading: isLoadingEndpoints,\n          tableData: endpointsData,\n          columns: tableColumns(getLogData, systemMonitorTablesConst.ENDPOINTS),\n        },\n        {\n          id: 4,\n          name: systemMonitorTablesConst.SCHEDULER_JOBS,\n          title: 'Scheduler Jobs',\n          counts: schedulerCounts,\n          isLoading: isLoadingScheduler,\n          tableData: schedulerData,\n          columns: schedulerTableColumns(getLogData, systemMonitorTablesConst.SCHEDULER_JOBS),\n        },\n      ],\n    ],\n    [\n      endpointsCounts,\n      endpointsData,\n      interfacesCounts,\n      interfacesData,\n      isLoadingEndpoints,\n      isLoadingInterfaces,\n      isLoadingLastTransactions,\n      isLoadingScheduler,\n      lastTransactionsData,\n      schedulerCounts,\n      schedulerData,\n      getLogData,\n    ]\n  );\n\n  return (\n    <React.Fragment>\n      <Flex alignItems=\"center\">\n        <PageTitle\n          title=\"System Monitor\"\n          pageId={uiItemsConst.SYSTEM_MONITOR}\n        />\n        <Box mb=\"5px\" ml=\"12px\">\n          {isCounter && (\n            <CountDownTimer seconds={60} />\n          )}\n        </Box>\n      </Flex>\n      <Box mx=\"-20px\">\n        <Flex flexWrap=\"wrap\" alignItems=\"flex-start\">\n          {systemMonitorBlocks.map((el: Array<object>, index) => (\n            <Box\n              key={index}\n              width={[1 / 2]}\n              px=\"20px\"\n            >\n              {el.map((block: Partial<ISysMonitorBlock>) => (\n                <SysMonitorBox\n                  key={block.id}\n                  isLoading={block.isLoading}\n                >\n                  <Collapse\n                    header={(\n                      <Header\n                        title={block.title}\n                        counts={block.counts}\n                      />\n                    )}\n                    additionalTool={(\n                      <RefreshCheckbox\n                        onClick={() => handleSetRefreshingTables(block.name)}\n                        value={!!cookiesUtil.get(`${location}/${block.name}`)}\n                      />\n                    )}\n                  >\n                    <Table\n                      data={block.tableData || []}\n                      columns={block.columns}\n                      pageSize={4}\n                      isSmaller={true}\n                    />\n                  </Collapse>\n                </SysMonitorBox>\n              ))}\n            </Box>\n          ))}\n        </Flex>\n      </Box>\n    </React.Fragment>\n  );\n};\n\nexport default withSpinner({\n  isFixed: true,\n})(SystemMonitor);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport SystemMonitor from './SystemMonitor';\n\nimport {\n  handleGetLogData,\n  handleGetSysMonitorData,\n  isSysMonitorEndpointsLoadingSelector,\n  isSysMonitorInterfacesLoadingSelector,\n  isSysMonitorLastTransactionsLoadingSelector,\n  isSysMonitorLoadingLogDataSelector,\n  isSysMonitorSchedulerLoadingSelector,\n  IStoreState,\n  resetSysMonitor,\n  sysMonitorEndpointsCountsSelector,\n  sysMonitorEndpointsSelector,\n  sysMonitorInterfacesCountsSelector,\n  sysMonitorInterfacesSelector,\n  sysMonitorLastTransactionsSelector,\n  sysMonitorSchedulerCountsSelector,\n  sysMonitorSchedulerSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isSysMonitorLoadingLogDataSelector(state),\n  isLoadingInterfaces: isSysMonitorInterfacesLoadingSelector(state),\n  isLoadingEndpoints: isSysMonitorEndpointsLoadingSelector(state),\n  isLoadingScheduler: isSysMonitorSchedulerLoadingSelector(state),\n  isLoadingLastTransactions: isSysMonitorLastTransactionsLoadingSelector(state),\n  interfacesData: sysMonitorInterfacesSelector(state),\n  endpointsData: sysMonitorEndpointsSelector(state),\n  schedulerData: sysMonitorSchedulerSelector(state),\n  lastTransactionsData: sysMonitorLastTransactionsSelector(state),\n  interfacesCounts: sysMonitorInterfacesCountsSelector(state),\n  endpointsCounts: sysMonitorEndpointsCountsSelector(state),\n  schedulerCounts: sysMonitorSchedulerCountsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    getSysMonitorData: handleGetSysMonitorData,\n    getLogData: handleGetLogData,\n    resetSysMonitor,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SystemMonitor);\n","import { TableCell, TableHeader } from 'components';\nimport { IUiSession } from 'store';\nimport { ITableCell } from 'types';\n\ntype TCell<T extends keyof IUiSession> = ITableCell<IUiSession[T]>;\n\nexport const tableColumns = [\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Institution\" />,\n    accessor: 'institutionName',\n    Cell: (props: TCell<'institutionName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 150,\n    Header: <TableHeader title=\"Username\" />,\n    accessor: 'username',\n    Cell: (props: TCell<'username'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 180,\n    Header: <TableHeader title=\"First Name\" />,\n    accessor: 'firstName',\n    Cell: (props: TCell<'firstName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 180,\n    Header: <TableHeader title=\"Last Name\" />,\n    accessor: 'lastName',\n    Cell: (props: TCell<'lastName'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 140,\n    Header: <TableHeader title=\"Last Date Time\" />,\n    accessor: 'lastDatetime',\n    Cell: (props: TCell<'lastDatetime'>) => (\n      <TableCell\n        value={props.value}\n        isDate={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 120,\n    Header: <TableHeader title=\"IP Address\" />,\n    accessor: 'ipAddress',\n    Cell: (props: TCell<'ipAddress'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n  {\n    maxWidth: 500,\n    Header: <TableHeader title=\"User Agent\" />,\n    accessor: 'userAgent',\n    Cell: (props: TCell<'userAgent'>) => (\n      <TableCell\n        value={props.value}\n        isSmaller={true}\n      />\n    ),\n  },\n  {\n    maxWidth: 100,\n    Header: <TableHeader title=\"Status\" />,\n    accessor: 'status',\n    Cell: (props: TCell<'status'>) => (\n      <TableCell\n        value={props.value}\n      />\n    ),\n  },\n];\n","import React from 'react';\nimport { Field } from 'redux-form';\n\nimport { Box } from '@rebass/grid';\n\nimport styled from 'theme';\n\nimport { SelectField } from 'components';\n\nimport { ISelectValue } from 'types';\nimport { formErrorUtil } from 'utils';\n\nconst InstitutionsWrapper = styled(Box)`\n  max-width: 50%;\n  min-width: 300px;\n  padding: 8px;\n`;\n\ninterface IUiSessionsFilter {\n  institutionsOptions: Array<ISelectValue>;\n  isDisabled: boolean;\n}\n\nconst UiSessionsFilter: React.FC<IUiSessionsFilter> = ({\n  institutionsOptions,\n  isDisabled,\n}) => {\n  return (\n    <React.Fragment>\n      <InstitutionsWrapper>\n        <Field\n          id=\"institutionId\"\n          name=\"institutionId\"\n          component={SelectField}\n          label=\"Institution\"\n          placeholder=\"Select Institution\"\n          options={institutionsOptions}\n          isMulti={true}\n          isDisabled={isDisabled}\n          isRequired={true}\n          validate={[formErrorUtil.isRequired]}\n        />\n      </InstitutionsWrapper>\n    </React.Fragment>\n  );\n};\n\nexport default UiSessionsFilter;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { UiSessionsFilter } from './forms';\n\nimport { basePath, cookiesExpiresConst, iconNamesConst, uiItemsConst } from 'consts';\n\nimport {\n  IUiSession,\n  THandleFilterUiSessions,\n  THandleFilterUsersActivityByData,\n  TResetUiSessions,\n} from 'store';\n\nimport { ISelectValue } from 'types';\nimport { cookiesUtil, dateUtil, storageUtil } from 'utils';\n\ninterface IUiSessions extends RouteComponentProps {\n  institutionsOptions: Array<ISelectValue>;\n  resetUiSessions: TResetUiSessions;\n  uiSessions: ImmutableArray<IUiSession>;\n  filterUiSessions: THandleFilterUiSessions;\n  filterUsersActivity: THandleFilterUsersActivityByData;\n  currentUserId: number;\n  isLoading: boolean;\n}\n\nconst UiSessions: React.FC<IUiSessions> = ({\n  institutionsOptions,\n  uiSessions,\n  filterUiSessions,\n  filterUsersActivity,\n  resetUiSessions,\n  currentUserId,\n  history,\n  isLoading,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetUiSessions();\n    },\n    [resetUiSessions]\n  );\n\n  const currentUserDataForFilter = React.useMemo(\n    () => {\n      const userData = uiSessions.find(el => el.id === currentUserId);\n\n      if (!userData) {\n        return null;\n      }\n\n      return {\n        username: {\n          value: userData.username,\n          label: `${userData.firstName} ${userData.lastName}`,\n        },\n        institutionId: {\n          value: userData.institutionId,\n          label: userData.institutionName,\n        },\n        usersActivityDateTimeFrom: dateUtil.yesterdayDateTime(),\n        usersActivityDateTimeTo: dateUtil.todayDateTime(),\n      };\n    },\n    [uiSessions, currentUserId]\n  );\n\n  const loggedInUsername = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      return userData && userData.username;\n    },\n    []\n  );\n\n  const handleGoToUsersActivity = React.useCallback(\n    () => {\n      const usersActivityPathName = `${basePath}${uiItemsConst.USERS_ACTIVITY}`;\n\n      cookiesUtil.set(\n        `${usersActivityPathName}-${loggedInUsername}`,\n        JSON.stringify(currentUserDataForFilter),\n        { expires: cookiesExpiresConst.MONTH }\n      );\n\n      history.push(usersActivityPathName);\n      filterUsersActivity(currentUserDataForFilter);\n    },\n    [history, currentUserDataForFilter, filterUsersActivity, loggedInUsername]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Show user activity',\n        icon: iconNamesConst.SHORT_TEXT,\n        action: handleGoToUsersActivity,\n      },\n    ],\n    [handleGoToUsersActivity]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: [institutionsOptions[0]],\n      };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <React.Fragment>\n      <PageTemplate\n        title=\"UI Sessions\"\n        data={uiSessions}\n        columns={tableColumns}\n        isDownloadButton={true}\n        filterAction={filterUiSessions}\n        isSearchable={true}\n        isLoading={isLoading}\n        contextMenuItems={contextMenuItems}\n        initialFilterValues={initialFilterValues}\n        FilterForm={\n          <UiSessionsFilter\n            isDisabled={isLoading}\n            institutionsOptions={institutionsOptions}\n          />\n        }\n      />\n\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(UiSessions);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport UiSessions from './UiSessions';\n\nimport {\n  activeItemIdSelector,\n  handleFilterUiSessions,\n  handleFilterUsersActivityByData,\n  IStoreState,\n  isUiSessionsLoadingSelector,\n  resetUiSessions,\n  uiSessionsSelector,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isUiSessionsLoadingSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  uiSessions: uiSessionsSelector(state),\n  currentUserId: activeItemIdSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterUiSessions: handleFilterUiSessions,\n    filterUsersActivity: handleFilterUsersActivityByData,\n    resetUiSessions,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UiSessions);\n"],"sourceRoot":""}