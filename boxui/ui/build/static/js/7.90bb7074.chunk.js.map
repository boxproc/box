{"version":3,"sources":["containers/PageTemplate/EditableTable.tsx","containers/PageTemplate/withEditTable.tsx","containers/PageTemplate/Filter/Filter.tsx","containers/PageTemplate/Filter/index.ts","containers/PageTemplate/PageTemplate.tsx","containers/PageTemplate/index.ts","containers/ProductDesigner/Products/Products.tsx","containers/ProductDesigner/Products/index.ts"],"names":["withEditTable","Component","WithEditTable","props","activeTableRowIndex","contextMenuItems","handleOpenModal","modalsStateList","handleSetActiveItemId","onRowClick","handleSetActiveTableRowIndex","viewingModalName","originProps","React","useState","isOpenedModal","setIsOpenedModal","isVisibleContextMenu","setIsVisibleContextMenu","handleRemoveActiveIds","useCallback","useEffect","isSomeModalOpened","modalsList","find","modal","name","openCurrentRowInModal","onContextMenuClick","e","value","withConfirmation","modalNamesConst","CONFIRMATION","payload","confirmationAction","action","confirmationTitle","confirmationText","menuItems","useMemo","openItem","icon","iconNamesConst","EDIT","handleClickOnRow","_","rowInfo","isLocked","original","lockedFlag","id","rowIndexOriginal","index","rowIndex","page","pageSize","onDoubleClick","onContextMenu","length","className","Fragment","disable","menuId","onClick","items","isHidden","onHide","displayName","componentUtil","getDisplayName","connect","state","activeTableRowIndexSelector","modalsStateListSelector","dispatch","bindActionCreators","openModal","setActiveItemId","setActiveTableRowIndex","withSpinner","pageTemplateProps","getTrGroupProps","activeRowIndex","FilterWrapper","styled","div","theme","colors","lighterGray","lighterGrayCell","color","darkGray","filteredFieldsToStore","data","Object","keys","filter","key","match","reduce","obj","reduxForm","form","formNamesConst","FILTER","destroyOnUnmount","enableReinitialize","FilterForm","filterAction","filterValues","handleSubmit","isAutoRefresh","isLoading","location","setIsAccessibleFiltering","stopAutoRefresh","username","userData","storageUtil","getUserData","valuesCount","values","acc","curr","isAccessibleButton","hasInstitution","hasTransactionId","hasAccountId","hasCustomerId","hasCardId","hasProductName","hasAccountAlias","hasPanAlias","hasLastName","conditions","default","basePath","uiItemsConst","SYSTEM_PROPERTIES","USERS","SCHEDULER","API_CALLS","USERS_ACTIVITY","ACCOUNTS","CARDS","STATEMENTS","CUSTOMERS","TRANSACTIONS","pathname","handleSubmitForm","a","cookiesUtil","set","JSON","stringify","expires","cookiesExpiresConst","MONTH","onSubmit","width","alignItems","flexWrap","m","text","disabled","formValues","getFormValues","isAutoRefreshSelector","Filter","withModal","withRouter","title","columns","newModalName","resetUtils","AdditionalButton","initialFilterValues","setIsOpenFilter","filterData","isOpenFilter","isDownloadButton","isSearchable","uiItems","isReadOnly","setActivePagePermission","isFilterable","setIsFilterable","timer","setInterval","clearInterval","currentUiItem","item","permission","filterButtonText","fileName","split","join","toLowerCase","isData","filterInitialValues","storedFilter","get","parse","isSearchableButton","handleSetIsFilterable","handleSetIsOpenFilter","PageTitle","pageId","mb","iconName","initialValues","fontSize","mr","PLUS","SEARCH","selectable","isDisabled","dropdownListPosition","ToggleButtonComponent","DOWNLOAD","FILE","downloadUtil","downloadCSV","classNames","seconds","ml","size","STOP","mt","EditableTable","filterable","isOpenFilterSelector","isReadOnlySelector","uiItemsSelector","PageTemplate","Products","productItems","institutionsOptions","filterProducts","currentProductName","deleteProduct","resetProducts","DELETE","institutionId","tableColumns","ADD_PRODUCT","EDIT_PRODUCT","isProductsFilteringSelector","isProductsDeletingSelector","productsSelector","userInstitutionsOptionsSelector","productNameSelector","handleFilterProducts","handleDeleteProduct"],"mappings":"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","file":"static/js/7.90bb7074.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Table, withSpinner } from 'components';\n\nimport { IWithEditTable, withEditTable } from './withEditTable';\n\ninterface IPageTemplate extends IWithEditTable {\n  data: Array<object>;\n  columns: Array<object>;\n  isLoading: boolean;\n}\n\nexport const PageTemplate: React.FC<IPageTemplate> = props => {\n  const { onRowClick, activeTableRowIndex, ...pageTemplateProps } = props;\n\n  return (\n    <Table\n      getTrGroupProps={onRowClick}\n      activeRowIndex={activeTableRowIndex}\n      {...pageTemplateProps}\n    />\n  );\n};\n\nexport default withEditTable(\n  withSpinner()(PageTemplate)\n);\n","import React from 'react';\nimport { ContextMenuTrigger } from 'react-contextmenu';\nimport { connect } from 'react-redux';\nimport { ComponentPropsGetter0, ComponentPropsGetterR, RowInfo } from 'react-table';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport { ContextMenuList } from 'components';\n\nimport { iconNamesConst, modalNamesConst } from 'consts';\n\nimport { modalsList } from 'containers/Modals/modalsList';\n\nimport {\n  activeTableRowIndexSelector,\n  IStoreState,\n  modalsStateListSelector,\n  openModal,\n  setActiveItemId,\n  setActiveTableRowIndex,\n  TOpenModal,\n  TSetActiveItemId,\n  TSetActiveTableRowIndex,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\n\nimport { componentUtil } from 'utils';\n\nexport interface IWithEditTable {\n  activeTableRowIndex?: number;\n  contextMenuItems?: Array<IContextMenuItem>;\n  handleOpenModal: TOpenModal;\n  modalsStateList: object;\n  onRowClick: ComponentPropsGetterR | ComponentPropsGetter0;\n  handleSetActiveItemId: TSetActiveItemId;\n  handleSetActiveTableRowIndex: TSetActiveTableRowIndex;\n  viewingModalName: string;\n}\n\nexport const withEditTable = <OriginProps extends {}>(\n  Component: React.ComponentType<OriginProps & Partial<IWithEditTable>>\n) => {\n  const WithEditTable: React.FC<IWithEditTable> = props => {\n    const {\n      activeTableRowIndex,\n      contextMenuItems = [],\n      handleOpenModal,\n      modalsStateList,\n      onRowClick,\n      handleSetActiveItemId,\n      handleSetActiveTableRowIndex,\n      viewingModalName,\n      ...originProps\n    } = props;\n\n    const [isOpenedModal, setIsOpenedModal] = React.useState(null);\n    const [isVisibleContextMenu, setIsVisibleContextMenu] = React.useState(false);\n\n    const handleRemoveActiveIds = React.useCallback(\n      () => {\n        setIsVisibleContextMenu(false);\n\n        handleSetActiveTableRowIndex(null);\n        handleSetActiveItemId(null);\n      },\n      [handleSetActiveTableRowIndex, handleSetActiveItemId]\n    );\n\n    React.useEffect(\n      () => {\n        const isSomeModalOpened = modalsList.find(modal => modalsStateList[`is${modal.name}`]);\n\n        setIsOpenedModal(isSomeModalOpened);\n      },\n      [modalsStateList]\n    );\n\n    React.useEffect(\n      () => {\n        if (!isOpenedModal) {\n          handleRemoveActiveIds();\n        }\n      },\n      [isOpenedModal, handleRemoveActiveIds]\n    );\n\n    const openCurrentRowInModal = React.useCallback(\n      () => handleOpenModal({ name: viewingModalName }),\n      [handleOpenModal, viewingModalName]\n    );\n\n    const onContextMenuClick = React.useCallback(\n      (e: Event, value: IContextMenuItem) => {\n        value.withConfirmation\n          ? handleOpenModal({\n            name: modalNamesConst.CONFIRMATION,\n            payload: {\n              confirmationAction: value.action,\n              confirmationTitle: value.confirmationTitle,\n              confirmationText: value.confirmationText,\n            },\n          })\n          : value.action();\n      },\n      [handleOpenModal]\n    );\n\n    const menuItems = React.useMemo(\n      () => {\n        const openItem = {\n          name: 'Open',\n          icon: iconNamesConst.EDIT,\n          action: () => openCurrentRowInModal(),\n        };\n\n        return viewingModalName ? [openItem, ...contextMenuItems] : contextMenuItems;\n      },\n      [contextMenuItems, viewingModalName, openCurrentRowInModal]\n    );\n\n    const handleClickOnRow = React.useCallback(\n      (_, rowInfo: RowInfo) => {\n        const isLocked = rowInfo.original.lockedFlag;\n        const id = rowInfo.original.id;\n        const rowIndexOriginal = rowInfo.index + 1; // from 1 for css style\n        const rowIndex = rowInfo.page\n          ? rowIndexOriginal - rowInfo.pageSize * rowInfo.page\n          : rowIndexOriginal; // considering page number\n\n        return {\n          onDoubleClick: () => {\n            if (viewingModalName) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              openCurrentRowInModal();\n            }\n          },\n          onContextMenu: () => {\n            if (menuItems.length) {\n              handleSetActiveItemId(id, isLocked);\n              handleSetActiveTableRowIndex(rowIndex);\n\n              setIsVisibleContextMenu(true);\n            }\n          },\n          className: isLocked && 'is-gray',\n        };\n      },\n      [\n        openCurrentRowInModal,\n        viewingModalName,\n        menuItems,\n        handleSetActiveItemId,\n        handleSetActiveTableRowIndex,\n      ]\n    );\n\n    return (\n      <React.Fragment>\n        <ContextMenuTrigger\n          id=\"tableContextMenu\"\n          disable={!menuItems.length}\n        >\n          <Component\n            onRowClick={handleClickOnRow}\n            activeTableRowIndex={activeTableRowIndex}\n            {...originProps as OriginProps}\n          />\n        </ContextMenuTrigger>\n        <ContextMenuList\n          menuId=\"tableContextMenu\"\n          onClick={onContextMenuClick}\n          items={menuItems}\n          isHidden={isOpenedModal || !isVisibleContextMenu}\n          onHide={(!isOpenedModal && activeTableRowIndex) ? handleRemoveActiveIds : null}\n        />\n      </React.Fragment>\n    );\n  };\n\n  WithEditTable.displayName = `WithEditTable(${componentUtil.getDisplayName(Component)})`;\n\n  const mapStateToProps = (state: IStoreState) => ({\n    activeTableRowIndex: activeTableRowIndexSelector(state),\n    modalsStateList: modalsStateListSelector(state),\n  });\n\n  const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n    {\n      handleOpenModal: openModal,\n      handleSetActiveItemId: setActiveItemId,\n      handleSetActiveTableRowIndex: setActiveTableRowIndex,\n    },\n    dispatch\n  );\n\n  return connect<Partial<IWithEditTable>, Partial<IWithEditTable>, any, IStoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n  )(WithEditTable);\n};\n","import React, { ReactChild } from 'react';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport { Flex } from '@rebass/grid';\nimport * as H from 'history';\nimport styled from 'theme';\n\nimport { Button } from 'components';\nimport { basePath, cookiesExpiresConst, formNamesConst, uiItemsConst } from 'consts';\nimport { TSetIsAccessibleFiltering, TStopAutoRefresh } from 'store';\nimport { cookiesUtil, storageUtil } from 'utils';\n\ninterface IFilterWrapper {\n  isHidden: boolean;\n}\n\nconst FilterWrapper = styled.div<IFilterWrapper>`\n  margin-bottom: 15px;\n  padding: 10px 15px 12px;\n  border: 1px solid ${({ theme }) => theme.colors.lighterGray};\n  border-radius: 2px;\n  background-color: ${({ theme }) => theme.colors.lighterGrayCell};\n\n  .title {\n    font-size: 18px;\n    color: ${({ theme, color }) => color || theme.colors.darkGray};\n    font-weight: bold;\n  }\n\n  ${({ isHidden }) => isHidden && `\n    display: none;\n  `};\n`;\n\ninterface IFilter {\n  filterAction: () => void;\n  filterValues: object;\n  isAutoRefresh: boolean;\n  isHidden: boolean;\n  isLoading: boolean;\n  location: H.Location;\n  setIsAccessibleFiltering: TSetIsAccessibleFiltering;\n  stopAutoRefresh: TStopAutoRefresh;\n  FilterForm: ReactChild;\n}\n\nexport const filteredFieldsToStore = (data: object) => {\n  return data && Object.keys(data)\n    .filter(key => !key.match(/dateFrom|dateTo|dateTimeFrom|dateTimeTo/gi))\n    .reduce(\n      (obj, key) => {\n        obj[key] = data[key];\n        return obj;\n      },\n      {}\n    );\n};\n\ntype TFilter = IFilter & InjectedFormProps<{}, IFilter>;\n\nconst Filter: React.FC<TFilter> = ({\n  FilterForm,\n  filterAction,\n  filterValues,\n  handleSubmit,\n  isAutoRefresh,\n  isHidden,\n  isLoading,\n  location,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n}) => {\n  const username = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      return userData && userData.username;\n    },\n    []\n  );\n\n  const valuesCount = React.useMemo(\n    () => filterValues\n      && Object.values(filterValues).reduce((acc, curr) => curr ? ++acc : acc, 0),\n    [filterValues]\n  );\n\n  const isAccessibleButton = React.useMemo(\n    () => {\n      const hasInstitution = filterValues && filterValues['institutionId'];\n      const hasTransactionId = filterValues && filterValues['transactionId'];\n      const hasAccountId = filterValues && filterValues['accountId'];\n      const hasCustomerId = filterValues && filterValues['customerId'];\n      const hasCardId = filterValues && filterValues['cardId'];\n      const hasProductName = filterValues && filterValues['productName'];\n      const hasAccountAlias = filterValues && filterValues['accountAlias'];\n      const hasPanAlias = filterValues && filterValues['panAlias'];\n      const hasLastName = filterValues && filterValues['lastName'];\n\n      const conditions = {\n        default: valuesCount > 0,\n        [`${basePath}${uiItemsConst.SYSTEM_PROPERTIES}`]: valuesCount >= 0,\n        [`${basePath}${uiItemsConst.USERS}`]: valuesCount >= 0,\n        [`${basePath}${uiItemsConst.SCHEDULER}`]: valuesCount >= 0,\n        [`${basePath}${uiItemsConst.API_CALLS}`]: valuesCount > 1,\n        [`${basePath}${uiItemsConst.USERS_ACTIVITY}`]: valuesCount > 1,\n        [`${basePath}${uiItemsConst.ACCOUNTS}`]: hasInstitution\n          && (hasAccountId || hasAccountAlias || hasLastName),\n        [`${basePath}${uiItemsConst.CARDS}`]: hasInstitution\n          && (hasAccountId || hasCardId || hasCustomerId || hasPanAlias),\n        [`${basePath}${uiItemsConst.STATEMENTS}`]: hasInstitution\n          && (hasAccountId || hasAccountAlias || hasLastName),\n        [`${basePath}${uiItemsConst.CUSTOMERS}`]: hasInstitution && (hasCustomerId || hasLastName),\n        [`${basePath}${uiItemsConst.TRANSACTIONS}`]: hasInstitution\n          && (hasTransactionId || hasProductName || hasCustomerId || hasAccountId),\n      };\n\n      return location.pathname in conditions ? conditions[location.pathname] : conditions.default;\n    },\n    [valuesCount, filterValues, location]\n  );\n\n  React.useEffect(\n    () => {\n      setIsAccessibleFiltering(isAccessibleButton);\n    },\n    [isAccessibleButton, setIsAccessibleFiltering]\n  );\n\n  // eslint-disable-next-line\n  const handleSubmitForm = React.useCallback(\n    handleSubmit(async data => {\n      await filterAction();\n\n      if (isAutoRefresh) {\n        stopAutoRefresh();\n      }\n\n      cookiesUtil.set(\n        `${location.pathname}-${username}`,\n        JSON.stringify(filteredFieldsToStore(data)),\n        { expires: cookiesExpiresConst.MONTH }\n      );\n    }),\n    [handleSubmit, filterAction, isAutoRefresh, stopAutoRefresh]\n  );\n\n  return (\n    <FilterWrapper isHidden={isHidden}>\n      <div className=\"title\">Filter</div>\n      <form onSubmit={handleSubmitForm}>\n        <Flex\n          width=\"960px\"\n          alignItems=\"flex-end\"\n          flexWrap=\"wrap\"\n          m=\"0 -8px 5px\"\n        >\n          {FilterForm}\n        </Flex>\n        <Button\n          text=\"Show\"\n          isLoading={isLoading}\n          disabled={!isAccessibleButton}\n        />\n      </form>\n    </FilterWrapper >\n  );\n};\n\nexport default reduxForm<{}, IFilter>({\n  form: formNamesConst.FILTER,\n  // keepDirtyOnReinitialize: true,\n  destroyOnUnmount: false,\n  enableReinitialize: true,\n})(Filter);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { getFormValues } from 'redux-form';\n\nimport { formNamesConst } from 'consts';\n\nimport Filter from './Filter';\n\nimport {\n  isAutoRefreshSelector,\n  IStoreState,\n  setIsAccessibleFiltering,\n  stopAutoRefresh,\n} from 'store';\n\nconst formValues = getFormValues(formNamesConst.FILTER);\n\nconst mapStateToProps = (state: IStoreState) => ({\n  filterValues: formValues(state),\n  isAutoRefresh: isAutoRefreshSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    setIsAccessibleFiltering,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Filter);\n","import React, { ReactChild } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\n\nimport { Box, Flex } from '@rebass/grid';\n\nimport { Button, CountDownTimer, Dropdown, DropdownOption } from 'components';\nimport { IWithModal, withModal } from 'HOCs';\n\nimport { basePath, iconNamesConst } from 'consts';\n\nimport EditableTable from './EditableTable';\nimport Filter from './Filter';\nimport PageTitle from './PageTitle';\n\nimport {\n  IUiItem,\n  TResetUtils,\n  TSetActivePagePermission,\n  TSetIsOpenFilter,\n  TStopAutoRefresh,\n} from 'store';\n\nimport { IContextMenuItem } from 'types';\nimport { cookiesUtil, downloadUtil, storageUtil } from 'utils';\n\ninterface PageTemplateProps extends RouteComponentProps, IWithModal {\n  AdditionalButton?: ReactChild;\n  columns: Array<object>;\n  contextMenuItems?: Array<IContextMenuItem>;\n  data: Array<object>;\n  filterAction?: () => void;\n  filterData: object;\n  FilterForm?: ReactChild;\n  initialFilterValues?: object;\n  isAutoRefresh?: boolean;\n  isDownloadButton?: boolean;\n  isLoading: boolean;\n  isOpenFilter: boolean;\n  isReadOnly: boolean;\n  isSearchable?: boolean;\n  newModalName?: string;\n  resetUtils: TResetUtils;\n  setActivePagePermission: TSetActivePagePermission;\n  setIsOpenFilter: TSetIsOpenFilter;\n  stopAutoRefresh: TStopAutoRefresh;\n  title: string;\n  uiItems: Array<IUiItem>;\n}\n\nexport const PageTemplate: React.FC<PageTemplateProps> = props => {\n  const {\n    title,\n    data,\n    columns,\n    FilterForm,\n    filterAction,\n    openModal,\n    newModalName,\n    location,\n    isAutoRefresh,\n    stopAutoRefresh,\n    resetUtils,\n    AdditionalButton,\n    initialFilterValues,\n    filterData,\n    setIsOpenFilter,\n    isOpenFilter,\n    isDownloadButton,\n    isSearchable,\n    uiItems,\n    isReadOnly,\n    isLoading,\n    setActivePagePermission,\n    ...pageTemplateProps\n  } = props;\n\n  const [isFilterable, setIsFilterable] = React.useState(false);\n\n  React.useEffect(\n    () => {\n      const timer = isAutoRefresh && setInterval(() => filterAction(), 5000);\n\n      return () => clearInterval(timer);\n    },\n    [isAutoRefresh, filterAction]\n  );\n\n  const currentUiItem = React.useMemo(\n    () => uiItems.find(item => `${basePath}${item.id}` === `${location.pathname}`),\n    [location, uiItems]\n  );\n\n  React.useEffect(\n    () => {\n      const permission = currentUiItem && currentUiItem.permission;\n\n      setActivePagePermission(permission);\n    },\n    [setActivePagePermission, uiItems, location, currentUiItem]\n  );\n\n  React.useEffect(\n    () => {\n      return () => resetUtils();\n    },\n    [resetUtils]\n  );\n\n  const filterButtonText = React.useMemo(\n    () => isOpenFilter ? 'Hide Filter' : 'Show Filter',\n    [isOpenFilter]\n  );\n\n  const fileName = React.useMemo(\n    () => title.split(' ').join('_').toLowerCase(),\n    [title]\n  );\n\n  const isData = React.useMemo(\n    () => data && data.length,\n    [data]\n  );\n\n  const filterInitialValues = React.useMemo(\n    () => {\n      const userData = storageUtil.getUserData();\n      const username = userData && userData.username;\n\n      const storedFilter = cookiesUtil.get(`${location.pathname}-${username}`);\n\n      return {\n        ...initialFilterValues,\n        ...(storedFilter ? JSON.parse(storedFilter) : {}),\n      };\n    },\n    [initialFilterValues, location]\n  );\n\n  const isSearchableButton = React.useMemo(\n    () => isSearchable && data && data.length > 10,\n    [isSearchable, data]\n  );\n\n  const handleSetIsFilterable = React.useCallback(\n    () => setIsFilterable(!isFilterable),\n    [isFilterable]\n  );\n\n  const handleSetIsOpenFilter = React.useCallback(\n    () => setIsOpenFilter(!isOpenFilter),\n    [setIsOpenFilter, isOpenFilter]\n  );\n\n  const handleOpenModal = React.useCallback(\n    () => openModal({ name: newModalName }),\n    [openModal, newModalName]\n  );\n\n  return (\n    <React.Fragment>\n      <PageTitle\n        title={title}\n        pageId={currentUiItem && currentUiItem.id}\n      />\n      {FilterForm && (\n        <Box mb=\"5px\">\n          <Button\n            text={filterButtonText}\n            iconName={iconNamesConst.FILTER}\n            onClick={handleSetIsOpenFilter}\n          />\n        </Box>\n      )}\n      {FilterForm && (\n        <Filter\n          filterAction={filterAction}\n          initialValues={filterInitialValues}\n          isHidden={!isOpenFilter}\n          isLoading={isLoading}\n          location={location}\n          FilterForm={FilterForm}\n        />\n      )}\n      <Flex alignItems=\"center\" fontSize=\"0px\">\n        {newModalName && !isReadOnly && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Add New\"\n              iconName={iconNamesConst.PLUS}\n              onClick={handleOpenModal}\n              disabled={isLoading}\n            />\n          </Box>\n        )}\n        {isSearchableButton && (\n          <Box mr=\"20px\">\n            <Button\n              text=\"Search\"\n              disabled={!isData || isLoading}\n              iconName={iconNamesConst.SEARCH}\n              onClick={handleSetIsFilterable}\n            />\n          </Box>\n        )}\n        {AdditionalButton && (\n          <Box mr=\"20px\">\n            {AdditionalButton}\n          </Box>\n        )}\n        {isDownloadButton && (\n          <Box mr=\"20px\">\n            <Dropdown\n              selectable={false}\n              isDisabled={!isData}\n              dropdownListPosition=\"center\"\n              ToggleButtonComponent={(\n                <Button\n                  text=\"Download\"\n                  iconName={iconNamesConst.DOWNLOAD}\n                  disabled={isLoading}\n                />\n              )}\n            >\n              <DropdownOption>\n                <Button\n                  text=\".csv\"\n                  iconName={iconNamesConst.FILE}\n                  onClick={() => downloadUtil.downloadCSV(fileName, data)}\n                  classNames={['no-text-transform']}\n                  disabled={isLoading}\n                />\n              </DropdownOption>\n            </Dropdown>\n          </Box>\n        )}\n        {isAutoRefresh && (\n          <Flex alignItems=\"flex-end\">\n            <CountDownTimer seconds={5} />\n            <Box ml=\"4px\">\n              <Button\n                text=\"Stop Auto Refreshing\"\n                size=\"11\"\n                iconName={iconNamesConst.STOP}\n                onClick={stopAutoRefresh}\n                disabled={isLoading}\n              />\n            </Box>\n          </Flex>\n        )}\n      </Flex>\n      <Box mt=\"5px\">\n        <EditableTable\n          data={data}\n          columns={columns}\n          filterable={isFilterable}\n          isLoading={isLoading}\n          {...pageTemplateProps}\n        />\n      </Box>\n    </React.Fragment >\n  );\n};\n\nexport default withModal(\n  withRouter(PageTemplate)\n);\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport PageTemplate from './PageTemplate';\n\nimport {\n  isAutoRefreshSelector,\n  isOpenFilterSelector,\n  isReadOnlySelector,\n  IStoreState,\n  resetUtils,\n  setActivePagePermission,\n  setIsOpenFilter,\n  stopAutoRefresh,\n  uiItemsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isAutoRefresh: isAutoRefreshSelector(state),\n  isOpenFilter: isOpenFilterSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n  uiItems: uiItemsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    stopAutoRefresh,\n    resetUtils,\n    setIsOpenFilter,\n    setActivePagePermission,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PageTemplate);\n","import React from 'react';\nimport { ImmutableArray } from 'seamless-immutable';\n\nimport { iconNamesConst, modalNamesConst } from 'consts';\n\nimport PageTemplate from 'containers/PageTemplate';\nimport { tableColumns } from './components';\nimport { ProductsFilter } from './forms';\n\nimport {\n  IProduct,\n  THandleDeleteProduct,\n  THandleFilterProducts,\n  TResetProducts,\n} from 'store';\n\nimport { ISelectValue } from 'types';\n\ninterface IProducts {\n  productItems: ImmutableArray<IProduct>;\n  institutionsOptions: Array<ISelectValue>;\n  currentProductName: string;\n  isLoading: boolean;\n  isReadOnly: boolean;\n  filterProducts: THandleFilterProducts;\n  deleteProduct: THandleDeleteProduct;\n  resetProducts: TResetProducts;\n}\n\nexport const Products: React.FC<IProducts> = ({\n  productItems,\n  institutionsOptions,\n  filterProducts,\n  currentProductName,\n  deleteProduct,\n  resetProducts,\n  isLoading,\n  isReadOnly,\n}) => {\n  React.useEffect(\n    () => {\n      return () => resetProducts();\n    },\n    [resetProducts]\n  );\n\n  const contextMenuItems = React.useMemo(\n    () => [\n      {\n        name: 'Delete',\n        icon: iconNamesConst.DELETE,\n        isDisabled: isReadOnly,\n        action: deleteProduct,\n        withConfirmation: true,\n        confirmationText: `Delete product \"${currentProductName}\"?`,\n      },\n    ],\n    [deleteProduct, currentProductName, isReadOnly]\n  );\n\n  const initialFilterValues = React.useMemo(\n    () => {\n      return {\n        institutionId: institutionsOptions[0],\n      };\n    },\n    [institutionsOptions]\n  );\n\n  return (\n    <PageTemplate\n      title=\"Products\"\n      data={productItems}\n      columns={tableColumns}\n      isDownloadButton={true}\n      newModalName={modalNamesConst.ADD_PRODUCT}\n      viewingModalName={modalNamesConst.EDIT_PRODUCT}\n      contextMenuItems={contextMenuItems}\n      filterAction={filterProducts}\n      initialFilterValues={initialFilterValues}\n      isLoading={isLoading}\n      FilterForm={\n        <ProductsFilter\n          isDisabled={isLoading}\n          institutionsOptions={institutionsOptions}\n        />\n      }\n    />\n  );\n};\n\nexport default Products;\n","import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\nimport Products from './Products';\n\nimport {\n  handleDeleteProduct,\n  handleFilterProducts,\n  isProductsDeletingSelector,\n  isProductsFilteringSelector,\n  isReadOnlySelector,\n  IStoreState,\n  productNameSelector,\n  productsSelector,\n  resetProducts,\n  userInstitutionsOptionsSelector,\n} from 'store';\n\nconst mapStateToProps = (state: IStoreState) => ({\n  isLoading: isProductsFilteringSelector(state) || isProductsDeletingSelector(state),\n  productItems: productsSelector(state),\n  institutionsOptions: userInstitutionsOptionsSelector(state),\n  currentProductName: productNameSelector(state),\n  isReadOnly: isReadOnlySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(\n  {\n    filterProducts: handleFilterProducts,\n    deleteProduct: handleDeleteProduct,\n    resetProducts,\n  },\n  dispatch\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Products);\n"],"sourceRoot":""}